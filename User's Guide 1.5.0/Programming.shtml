<html>

<head>


<style type="text/css">
pre {margin-top:0;margin-bottom:0;}
</style>




<title>KICKS User's Guide - Programming</title>
<base target="_self">

<script language="javascript">
if(self.location==top.location)self.location="index.html?Programming.shtml";
</script>

</head>

<BODY>


<!-- ** NOTE ** The minimum width of the 2nd column of the API table -->
<!-- is controlled by an embedded table at the bottom of DELETEQ TS  -->


<table border="0" cellpadding="0" style="border-collapse: collapse" width="100%" height="72">
	<tr>
		<td width="141" valign="top"><i><b><font size="7">KICKS</font></b></i></td>
		<td valign="bottom">
		<p align="right"><font size="6"><span style="font-weight: 400">A
		transaction processing system for </span></font>
		<font size="7" color="#FF0000"><span style="font-weight: 700">CMS</span></font><font size="6"><span style="font-weight: 400"> &amp; </span></font><font color="#FF0000" size="7">
		<span style="font-weight: 700">TSO</span></font></td>
	</tr>
</table>

<h2>Programming
</h2>
<p>A <b><i>KICKS</i></b> application consists of a a group of related objects.
The first set of objects in the group are the <u>MAPS</u> that define terminal
input and output characteristics. The second is set of objects are <u>PROGRAMS</u>
that may use the MAPS to interact with the terminal, implement some kind of
business logic, and optionally commit the results of the logic to external <u>
FILES</u>, which are a third set of objects.</p>
<p>The relationship between <b><i>KICKS</i></b> application objects is created
by the <b><i>KICKS</i></b> system tables (see <a href="Configuration.htm"> <b><i>KICKS</i></b> configuration</a>
section) and by the programs that use the other objects.</p>
<h3>Generating BMS maps
</h3>
<p><i><b>KICKS</b></i> supports 3270 BMS maps much like CICS BMS maps. <i><b>
KICKS</b></i> uses macros named KIKMSD, KIKMDI, and KIKMDF instead of DFHMSD,
DFHMDI, and DFHMDF, but with similar arguments. To make conversion easier it also
support ‘dummy’ versions of DFHMSD, DFHMDI, and DFHMDF that do nothing but
invoke KIKMSD, KIKMDI, and KIKMDF respectively. This allows for generation of
maps directly from source originally intended for CICS.
</p>
<p>Detailed instructions for coding BMS maps may be found by simply Googling
&quot;BMS map&quot;. I recommend the IBM sites. Another excellent set of resources are the
Murach books &quot;<a target="_blank" href="http://www.amazon.com/Murachs-CICS-COBOL-Programmer-Menendez/dp/189077409X/ref=pd_sim_b_5">CICS
for the COBOL Programmer</a>&quot; and &quot;<a target="_blank" href="http://www.amazon.com/Murachs-CICS-Desk-Reference-Menendez/dp/1890774170/ref=sr_1_1?s=books&ie=UTF8&qid=1284170261&sr=1-1">CICS
Programmer's Desk Reference</a>&quot;. And don't overlook our own
<a href="../same/KooKbooK/KooKbooK.htm">KooKbooK</a> recipes!</p>
<p>The map you code needs to be translated into three separate components. The
first is a COBOL copybook you include with each COBOL program that will use the map.
The second is a GCCMVS include file you include with each GCC program that will
use the map. The third is a binary representation of the map that <i><b>KICKS</b></i> will
use to format the screen as you describe and to process input data from the
screen when the user presses ‘enter’.
</p>
<p>On an MVS system the KIKMAPS proc is used to directly generate the COBOL and GCC 
copybooks and binary representation from the map source. The proc takes 
arguments as indicated in the proc header below</p>
<blockquote>
	<blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">
		//KIKMAPS PROC SOUT='*',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DSCTLIB='COBCOPY',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DSCTLIC='GCCCOPY',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAPLIB='KIKRPL',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSSYS='HERC01.KICKSSYS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSUSR='HERC01.KICKS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VER='V1R5M0',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASM='IFOX00',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		(ASMA90 FOR Z/OS) <br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MAPNAME='DUMMY'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</span></font></p>
	</blockquote>
</blockquote>
<p>The proc header is customized during installation so that it is usually only 
necessary to specify the MAPNAME of the map to be gnerated.</p>
<p>Most of the proc arguments should be self explanatory. The step names
are COPY, BMAP, ASM, LINKMAP COBMAP, and GCCMAP. BMAP, COBMAP, and GCCMAP are the <i><b>KICKS</b></i>
map translator executions and return condition 2-comment, 4-warning; 8-error;
12-fatal error.
</p>
<p>Numerous examples of use of proc can be seen in the members of 
HERC01.KICKS.V1R5M0.MAPSRC, which
compiles the sample program maps.</p>
<p>On a VM/CMS system the KIKMG exec&nbsp; is used to directly generate the COBOL and GCC 
copybooks and binary representation from the map source. It takes arguments as 
below</p>
<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<span style="background-color: #CCFFCC">mapname filetype filemode txtlib&nbsp; 
coblib&nbsp;&nbsp; gcclib&nbsp;&nbsp; asmnam <br>
</span>default <span style="background-color: #CCFFCC">-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
MAPSRC&nbsp;&nbsp; A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKURPL KIKCOUSR 
KIKGCUSR ASSEMB </span></font></p>
<p>There is no particular install customization of this exec. </p>
<p>Additional detail about the arguments can be obtained by typing KIKMG without 
any arguments. The steps executed are the same as in MVS/TSO: COPY, BMAP, ASM, LINKMAP COBMAP, and GCCMAP. BMAP, COBMAP, and GCCMAP are the <i><b>KICKS</b></i>
map translator executions and return condition 2-comment, 4-warning; 8-error;
12-fatal error.
</p>
<p>Numerous examples of use of this execs can be seen in the KIKSAMPM EXEC which
compiles the sample program maps.</p>
<p>Whether MVS or VM/CMS, the map generator step(s) are controlled thru parm switches, ie</p>
<div align="center">
	<table border="0" bgcolor="#FFFFCC" width="630">
		<!-- MSTableType="nolayout" -->
		<tr>
			<td><font face="Courier New" size="2">
&nbsp; -list&nbsp;&nbsp;&nbsp;&nbsp; list stdin to stderr <br>
* -nolist&nbsp;&nbsp; do not list stdin to stderr <br>
&nbsp; -g=dsect&nbsp; override source msd type with 'dsect' <br>
&nbsp; -g=map&nbsp;&nbsp;&nbsp; override source msd type with 'map' <br>
&nbsp; -l=cobol&nbsp; override source msd lang with 'COBOL' <br>
&nbsp; -l=c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; override source msd lang with 'c' <br>
* -t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;translate DFH's to KIK's; CICS's to KICKS's <br>
&nbsp; -nt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not translate DFH's and CICS's<br>
&nbsp; -v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; show version <br>
&nbsp; -?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list help <br>
<br>
where '*'s are built-in defaults; effectively what you get with KIKMG.
</font></td>
		</tr>
	</table>
</div>
<p dir="ltr">It is not usually necessary to be concerned with these; the exec/proc
sets appropriate values for each pass.</p>
<h3><a name="compiling"></a>Compiling COBOL programs
</h3>
<p>Detailed instructions for designing and coding COBOL programs for <i><b>KICKS</b></i>
may be found by simply Googling &quot;CICS programming&quot;. I recommend the IBM sites.
Another excellent set of resources are the Murach books &quot;<a target="_blank" href="http://www.amazon.com/Murachs-CICS-COBOL-Programmer-Menendez/dp/189077409X/ref=pd_sim_b_5">CICS
for the COBOL Programmer</a>&quot; and &quot;<a target="_blank" href="http://www.amazon.com/Murachs-CICS-Desk-Reference-Menendez/dp/1890774170/ref=sr_1_1?s=books&ie=UTF8&qid=1284170261&sr=1-1">CICS
Programmer's Desk Reference</a>&quot;. And don't overlook our own
<a href="../same/KooKbooK/KooKbooK.htm">KooKbooK</a> recipes!</p>
<p>Preparing a command level COBOL program to run in <i><b>KICKS</b></i>
requires three steps:
</p>
<ol>
	<li>Run the <i><b>KICKS</b></i> command level pre-processor against the
	COBOL source, generating intermediate source that has been modified as
	necessary for the current release of <i><b>KICKS</b></i>.
	<p>The pre-processor’s primary function is to translate “EXEC KICKS …
	END-EXEC” statements into a variety of COBOL statements necessary to
	implement the desired function. In most cases this ultimately turns into a
	call to KIKCOBGL which is the KICKS stub that is link edited into every <i>
	<b>KICKS</b></i> command level program. To ease conversion of CICS programs
	to <i><b>KICKS</b></i> the pre-processor accepts “EXEC CICS” as equivalent
	to “EXEC KICKS”. It also generally sees anything starting with DFH as
	starting with KIK, so for example you don’t have to change something like
	DFHRESP to it equivalent KIKRESP – the preprocessor will do that for you.
	</p></li>
	<li>
	<p style="margin-top: 12px">Compile the intermediate source with the COBOL
	compiler.</p></li>
	<li>
	<p style="margin-top: 12px">Linkedit the compiled program, including
	KIKCOBGL for the current release of <i><b>KICKS</b></i> and place the resulting load module into a PDS in the
	KIKRPL concatenation of the KICKS clist. </p></li>
</ol>
<p>An optional 4th step is to add the source code to an online vsam file so that 
the debugger's source trace facility can display it at run time. This is 
discussed in the KEDF section of this User's Guide.</p>
<p>On an MVS system several procs are supplied for doing all this, each proc corresponding to a
different COBOL compiler. The first of these is K2KCOBCL, for the MVT ANSI COBOL
compiler. This is the compiler on the Tur(n)key MVS system.<u> It would not
normally be installed on a Z/OS system</u>, but is available for download at
<a target="_blank" href="http://www.jaymoseley.com/hercules/compilers/cobol.htm">
http://www.jaymoseley.com/hercules/compilers/cobol.htm</a>. </p>
<p>K2KCOBCL's proc header looks
like</p>
<blockquote>
	<blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">
		//K2KCOBCL PROC SOUT='*',ZOUT='Z',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNT='SYSDA',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSSYS='HERC01.KICKSSYS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSUSR='HERC01.KICKS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VER='V1R5M0',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CBLPARM='SUPMAP,DMAP,CLIST' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</span></font></p>
	</blockquote>
</blockquote>
<p>The proc will have been customized during install so that
the default values will contain your TSO id instead of 'HERC01'. Tur(n)key or
Z/OS, it is not usually necessary to override these customized defaults.</p>
<p>Most of the proc arguments should be self explanatory. The step names are 
COPY. PP1,
COB1,&nbsp; PP2,
COB2, and LKED. COBs requires a condition code of less than 4 from PPs, and LKED
requires condition codes of less than 4 from both PP and COB. PP’s condition
code values are 2-warning; 4-error; 8-severe error; 12-fatal error (PP aborts). </p>
<div align="center">
	<table border="0" bgcolor="#FFFFCC" width="630">
		<!-- MSTableType="nolayout" -->
		<tr>
			<td><font face="Courier New" size="2"><b><u>Digression</u>: Why are
			the preprocessor &amp; compiler executed twice?</b><br>
			<br>
			<i><b>KICKS</b></i> users upgrading from past releases will notice
			the name of this<br>
			proc has changed. The old proc, KIKCOBCL, is still available but<br>
			should not be used. The primary difference between them is that the<br>
			new proc executes the preprocessor and COBOL compiler twice, instead<br>
			of once as does the old proc. Why?? Because many KICKS api calls<br>
			require an argument length. 'Modern' compilers support a LENGTH OF
			<br>
			construct that allows the preprocessor to supply this length if it
			is<br>
			omitted. The ANSI MVT compiler supplied with the MVS Tur(n)key system<br>
			does not. To compensate for this missing COBOL feature the
			preprocessor<br>
			supplies the feature. It does so by using two passes; the first to<br>
			obtain the compiler DMAP (ie, symbol table), the second pass to
			provide<br>
			the required lengths by referencing the DMAP from the first pass.</font></td>
		</tr>
	</table>
</div>
<p>Another COBOL compile proc is KIKCB2CL, for a 'modern' program product COBOL
compiler. It's proc header looks
like</p>
<blockquote>
	<blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">
		//KIKCB2CL PROC SOUT='*',ZOUT='Z',&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNT='SYSDA',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSSYS='HERC01.KICKSSYS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSUSR='HERC01.KICKS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VER='V1R5M0',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CBLPARM='OFFSET,MAP,XREF' &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</span></font></p>
	</blockquote>
</blockquote>
<p>The proc will have been customized during install so that the default values
will contain your user id instead of 'HERC01'.. It
is not usually necessary to override these customized defaults.</p>
<p>The rest of the proc arguments are similar to K2KCOBCL. The step names are 
the same except that since COBOL2 supports &quot;LENGTH OF&quot; the preprocessor and 
compiler and only executed once in this proc, so PP1 and COB1 are missing.</p>
<p>Besides K2KCOBCL &amp; KIKCB2CL there are 2 similar procs, K2KCOBCS &amp; KIKCB2CS,
that are used when you need to setup your program for use with the KEDF source
code trace facility and&nbsp; are further explained in that section of the
User's Guide.</p>
<p>Numerous examples of use of these procs can be seen in HERC01.KICKSSYS.V1R5M0.COB 
(CB2 for COBOL2) which
compile the sample programs. Briefly, most of them look like this</p>
<blockquote>
	<blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">
//asdf JOB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
// EXEC PROC=K2KCOBCL&nbsp;&nbsp;&nbsp;&nbsp;(or KIKCB2CL for COBOL2)&nbsp;&nbsp;&nbsp;&nbsp; <br>
//COPY.SYSUT1 DD *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
       …COBOL source…&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
//LKED.SYSIN DD *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 INCLUDE SKIKLOAD(KIKCOBGL)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 ENTRY asdf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
 NAME asdf(R)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</span></font></p>
	</blockquote>
</blockquote>
<p>Where &quot;ENTRY asdf&quot; and&nbsp; &quot;NAME asdf&quot; both reference the PROGRAM-ID in the
ID DIVISION.</p>
<p>On an VM/CMS system several execs are supplied for doing all this, each exec corresponding to a
different COBOL compiler. </p>
<p>The first of these is K2KCOBCL, for the MVT ANSI COBOL
compiler. This is the compiler on the VM/370 turnkey system.<u> It would not 
normally be installed on a Z/VM system</u>, but is available for download at
<a target="_blank" href="http://www.jaymoseley.com/hercules/compilers/cobol.htm">
http://www.jaymoseley.com/hercules/compilers/cobol.htm</a>.&nbsp; The arguments 
for this exec are:</p>
<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<span style="background-color: #CCFFCC">pgmname filetype filemode txtlib&nbsp; 
maclib glue&nbsp;&nbsp;&nbsp; <br>
</span>defaults <span style="background-color: #CCFFCC">-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
COBOL&nbsp;&nbsp;&nbsp; A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKURPL *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
KIKCOBGL</span></font></p>
<p>There is no particular install customization of this exec. </p>
<p>Another COBOL compile exec is KIKCB2CL, for a 'modern' program product COBOL 
compiler. It's arguments are the same as K2KCOBCL.</p>
<p>Additional detail about the arguments of these execs can be obtained by typing 
them without 
any arguments. The steps executed are the same as in MVS/TSO.</p>
<p>Numerous examples of use of these execs can be seen in the KIKSAMPP EXEC which
compiles the sample programs.</p>
<p>It's worth noting that the same <i><b>KICKS</b></i> COBOL preprocessor is 
used on all systems, MVS or VM, legacy or modern. The environmental differences are
passed from the clist/exec to the preprocessor mostly thru parm switches, ie</p>
<div align="center">
	<table border="0" bgcolor="#FFFFCC" width="630">
		<!-- MSTableType="nolayout" -->
		<tr>
			<td><font face="Courier New" size="2">&nbsp; -s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			generate for source debugger <br>
			* -ns&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not generate for source 
			debugger<br>
* -t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; translate DFH's to KIK's; CICS's to KICKS's <br>
&nbsp; -nt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not translate DFH's and CICS's<br>
&nbsp; -cb2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; generate for COBOL 2 instead of ansi COBOL <br>
* -ncb2&nbsp;&nbsp;&nbsp;&nbsp; generate for ansi COBOL instead of COBOL 2 <br>
* -wc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preprocess 'when compiled'<br>
&nbsp; -nwc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not preprocess 'when compiled' <br>
* -ndmap&nbsp;&nbsp;&nbsp; no dmap processing<br>
&nbsp; -dmapin1&nbsp; do 1st pass dmap processing <br>
&nbsp; -dmapin2&nbsp; do 2nd pass dmap processing <br>
&nbsp; -nosyslib disable pre-processor 'copy' function<br>
&nbsp; -nokicks&nbsp; generate for use in normal batch (or for CICS) (not KICKS) apps <br>
&nbsp; -v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; show version <br>
&nbsp; -?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; show help </font>
			<p><font face="Courier New" size="2">where '*'s are built-in
			defaults; effectively what you get with K2KCOBCL. KIKCB2CL overrides
			to provides &quot;-cb2&quot;.</font></td>
		</tr>
	</table>
</div>
<p dir="ltr">It is not usually necessary to be concerned with these; the proc/exec
sets appropriate values. But sometimes you may not want to translate DFH's and
CICS's, and/or may not want &quot;when compiled&quot; handled by the pre-processor. Of
course you could make your own special copy of K2KCOBCL to handle that but there
is an easier way. The pre-processor understands a few simple&nbsp; 'markup' tags
that you can add to your source program to control the pre-processor's actions.
These tags begin with a &quot;&lt;&quot; in column 1, followed by a tag, followed by a &quot;&gt;&quot;,
with the remainder or the line subsequently ignored.&nbsp; Note that none of
these tags may be used within an 'EXEC' block. Here are the tags the
pre-processor understands:</p>
<div align="center">
	<table border="0" bgcolor="#FFFFCC" width="630">
		<!-- MSTableType="nolayout" -->
		<tr>
			<td><font face="Courier New" size="2">&lt;T&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			following lines handled as if &quot;-t&quot; were specified <br>
			&lt;NT&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; following lines
			handled as if &quot;-nt&quot; were specified&nbsp; <br>
			&lt;WC&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; following lines
			handled as if &quot;-wc&quot; were specified <br>
			&lt;NWC&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; following lines handled as
			if &quot;-nwc&quot; were specified </font>
			<p><font face="Courier New" size="2">So for example you could use
			&lt;NT&gt; at the top of a program that didn't want CICS's and DFH's
			translated; or you could put a &lt;NT&gt; just before lines with such
			strings in them and then put a &lt;T&gt; after them allowing translations
			everywhere but the selected lines.</font></p>
			<p><font face="Courier New" size="2">Besides the parm switch
			overrides the pre-processor also supports matched sets of tags.
			These allow you to conditionally include program lines. The syntax
			is &lt;xxx&gt; to start, then the lines for that condition, then &lt;/xxx&gt; to
			stop. Conditions are </font></p>
			<p><font face="Courier New" size="2">&lt;CB2&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/CB2&gt; only generate if -cb2 parm is set<br>
			&lt;NCB2&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lines to &lt;/NCB2&gt; only generate
			if -cb2 parm is not set</font></p>
			<p><font face="Courier New" size="2">
			&lt;TSO&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/TSO&gt; only generate if compiled on <i>KICKS for TSO</i>.<br>
			&lt;NTSO&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lines to &lt;/NTSO&gt; only generate
			if <i>not KICKS for TSO</i>.<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not assume 'not <i>
			KICKS for TSO'</i> means <i>'is KICKS for CMS'</i></font>
			</p>
			<p><font face="Courier New" size="2">&lt;CMS&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/CMS&gt; only generate if compiled on <i>KICKS for CMS</i>.<br>
			&lt;NCMS&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lines to &lt;/NCMS&gt; only generate
			if not <i>KICKS for CMS</i>.</font></p>
			<p><font face="Courier New" size="2">&lt;NOP&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/NOP&gt; do not generate.</font><p>
			<font face="Courier New" size="2">&lt;REM&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			for a one line remark. There is no &lt;/REM&gt;</font><p><font face="Courier New" size="2">&lt;KICKS&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lines to &lt;/KICKS&gt;
			only generate if -nokicks parm is not set<br>
			&lt;NOKICKS&gt;&nbsp;&nbsp;&nbsp;lines to &lt;/NOKICKS&gt; only
			generate if -nokicks parm is set&nbsp; </font>
			<p><font face="Courier New" size="2">&lt;SD&gt;, &lt;/SD&gt;, &lt;SN&gt; are used in
			connection with source code tracing and are explained in that
			section of the documentation.</font></td>
		</tr>
	</table>
</div>
<h3><a name="compilingGCC"></a>Compiling GCCMVS programs
</h3>
<p>A GCC C compiler (GCCMVS) and library (PDPCLIB) is included with most legacy 
MVS and VM/370 distributions and can also be installed on a Z/OS or Z/VM system. </p>
<p>Detailed instructions for designing and coding C programs for <i><b>KICKS</b></i>
are not easy to find, but one place with numerous examples is the
<a target="_blank" href="http://support.sas.com/documentation/onlinedoc/sasc/doc750/html/cics/index.htm">
SAS C documentation</a> site. <i><b>KICKS</b></i> with GCC is not exactly the
same as CICS with SASC, but quite similar. And don't overlook our own
<a href="../same/KooKbooK/KooKbooK.htm">KooKbooK</a> recipes!</p>
<p>Preparing a command level GCCMVS program to run in <i><b>KICKS</b></i>
requires three steps:
</p>
<ol>
	<li>Run the <i><b>KICKS</b></i> command level pre-processor against the
	C source, generating intermediate source that has been modified as
	necessary for the current release of <i><b>KICKS</b></i>.
	<p>The pre-processor’s primary function is to translate “EXEC KICKS …
	;” statements into a variety of C statements necessary to
	implement the desired function. In most cases this ultimately turns into a
	call to KIKGCCGL which is the KICKS stub that is link edited into every <i>
	<b>KICKS</b></i> command level program. To ease conversion of CICS programs
	to <i><b>KICKS</b></i> the pre-processor accepts “EXEC CICS” as equivalent
	to “EXEC KICKS”. It also generally sees anything starting with DFH as
	starting with KIK, so for example you don’t have to change something like
	DFHRESP to it equivalent KIKRESP – the preprocessor will do that for you.
	</p></li>
	<li>
	<p style="margin-top: 12px">Compile the intermediate source with the GCCMVS
	compiler.</p></li>
	<li>
	<p style="margin-top: 12px">Linkedit the compiled program, including
	KIKGCCGL for the current release of <i><b>KICKS</b></i> from
	HERC01.KICKSSYS.V1R5M0.SKIKLOAD, and place the resulting load module into a PDS in the
	KIKRPL concatenation of the KICKS clist. </p></li>
</ol>
<p>An optional 4th step is to add the source code to an online vsam file so that 
the debugger's source trace facility can display it at run time. This is 
discussed in the KEDF section of this User's Guide.</p>
<p>On an MVS system the KIKGCCCL proc is supplied for doing all this. It's proc header looks
like</p>
<blockquote>
	<blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">
		//KIKGCCCL PROC OUTC='*',LAOUTC='Z',LBOUTC='Z', &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNT='SYSDA',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSSYS='HERC01.KICKSSYS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKSUSR='HERC01.KICKS',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VER='V1R5M0',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASM='IFOX00',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		ASMA90 FOR Z/OS
	</span></font></p>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COPTS='',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LOPTS='XREF,MAP',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GCCPREF='HERC01.GCC.V80',&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PDPPREF='HERC01.PDPCLIB.V80'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	</span></font></p>
	</blockquote>
</blockquote>
<p>The proc will have been customized during install so that
the default values will contain your user id instead of 'HERC01'.</p>
<p>The GCCPREF
and PDPPREF default values will probably have to be manually customized. On an
MVS380 system they should be 'GCC' and 'PDPCLIB' respectively. On other systems
that will likely vary. For example on a Z/OS system GCCMVS will likely have been
installed by the TSO user with his own TSO id as a HLQ, and it may be that he
would have installed it with a lower level qualifier (like 'V80') to denote what
version of the compiler and library was used.</p>
<p>LAOUTC and LBOUTZ are sysout classes for optional listings for the
preprocessor C source input and the C source output respectively. Normally they
are directed to a JES dummy queue (usually Z), but you may want to override them
if errors are detected. If the preprocessor complains about something it will
indicate a line number and that number will correspond to a line number in the
LAOUTC sysout. If the compiler complains about something it will indicate a line
number and that number will correspond to a line number in the LBOUTC sysout.</p>
<p>Most of the other proc arguments should be self explanatory. The step names are 
COPY, LISTA, PP2, LISTB, COMP, ASM, and LKED. The list steps provides a listing of the preprocessor
input and output, with line numbers, so that diagnostics from the compiler and be traced
to the offending line of source. This is necessary because the GCCMVS compiler
does not provide a listing itself. COMP requires a condition code of less than 4 from PP, and LKED
requires condition codes of less than 4 from both PP and COMP. PP’s condition
code values are 2-warning; 4-error; 8-severe error; 12-fatal error (PP aborts). </p>
<p>Besides KIKGCCCL there is a similar proc, KIKGCCCS, that is used when you
need to setup your program for use with the KEDF source code trace facility and
is further explained in that section of the User's Guide.</p>
<p>Some examples of use of these procs can be seen in 
HERC01.KICKSSYS.V1R5M0.TESTGCC which compile the api test programs. Briefly, 
most of them look like this</p>
<blockquote>
	<blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		<span style="background-color: #CCFFCC">//asdf 
		JOB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		// EXEC PROC=KIKGCCCL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		&nbsp;&nbsp; <br>
		//COPY.SYSUT1 DD *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		…GCC source…&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		//LKED.SYSIN DD *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		INCLUDE SKIKLOAD(KIKGCCGL)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		ENTRY @@KSTRT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<br>
		NAME asdf(R)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
		/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></font></p>
	</blockquote>
</blockquote>
<p>Where &quot;NAME asdf&quot; matches the name you defined for this program in the PPT. 
If you use a &lt;SN xxxxxxxx&gt; preprocessor markup statement the name in your 
linkedit NAME statement should match.</p>
<p>On an VM/CMS system similarly named KIKGCCCL and KIKGCCCS execs are supplied 
for the same purpose. The arguments for the KIKGCCCL exec are:</p>
<p><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="background-color: #CCFFCC">
pgmname filetype filemode txtlib&nbsp; maclib glue&nbsp;&nbsp;&nbsp;&nbsp; asmname&nbsp; <br>
</span>defaults <span style="background-color: #CCFFCC">-&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKURPL *&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KIKGCCGL ASSEMBLE </span></font></p>
<p>There is no particular install customization of this exec. </p>
<p>Additional detail about the arguments of these execs can be obtained by 
typing them without any arguments. The steps executed are the same as in MVS/TSO.</p>
<p>Numerous examples of use of these execs can be seen in the members of TESTGCC 
VMARC, which compiles the api test programs.</p>
<p>It's worth noting that the same <i><b>KICKS</b></i> GCC preprocessor is used 
on all systems, MVS or VM, legacy or modern. The environmental differences are 
passed from the clist/exec to the preprocessor mostly thru parm switches, ie</p>
<div align="center">
	<table border="0" bgcolor="#FFFFCC" width="630">
		<!-- MSTableType="nolayout" -->
		<tr>
			<td><font face="Courier New" size="2">&nbsp; -s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			generate for source debugger <br>
			* -ns&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not generate for source 
			debugger<br>
* -t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; translate DFH's to KIK's; CICS's to KICKS's <br>
&nbsp; -nt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not translate DFH's and CICS's<br>
&nbsp; -v&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; show version <br>
&nbsp; -nokicks&nbsp; generate for use in normal batch (or for CICS) (not KICKS) apps <br>
&nbsp; -?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; show help </font>
			<p><font face="Courier New" size="2">where '*'s are built-in
			defaults; effectively what you get with KIKGCCCL. </font></td>
		</tr>
	</table>
</div>
<p dir="ltr">It is not usually necessary to be concerned with these; the proc
sets appropriate values. But sometimes you may not want to translate DFH's and
CICS's. Of
course you could make your own special copy of KIKGCCCL to handle that but there
is an easier way. The pre-processor understands a few simple&nbsp; 'markup' tags
that you can add to your source program to control the pre-processor's actions.
These tags begin with a &quot;&lt;&quot; in column 1, followed by a tag, followed by a &quot;&gt;&quot;,
with the remainder or the line subsequently ignored.&nbsp; Note that none of
these tags may be used within an 'EXEC' block. Here are the tags the
pre-processor understands:</p>
<div align="center">
	<table border="0" bgcolor="#FFFFCC" width="630">
		<!-- MSTableType="nolayout" -->
		<tr>
			<td><font face="Courier New" size="2">&lt;T&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			following lines handled as if &quot;-t&quot; were specified <br>
			&lt;NT&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; following lines
			handled as if &quot;-nt&quot; were specified&nbsp; </font>
			<p><font face="Courier New" size="2">So for example you could use
			&lt;NT&gt; at the top of a program that didn't want CICS's and DFH's
			translated; or you could put a &lt;NT&gt; just before lines with such
			strings in them and then put a &lt;T&gt; after them allowing translations
			everywhere but the selected lines.</font></p>
			<p><font face="Courier New" size="2">Besides the parm switch
			overrides the pre-processor also supports matched sets of tags.
			These allow you to conditionally include program lines. The syntax
			is &lt;xxx&gt; to start, then the lines for that condition, then &lt;/xxx&gt; to
			stop. Conditions are </font></p>
			<p><font face="Courier New" size="2">
			&lt;TSO&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/TSO&gt; only generate if compiled on <i>KICKS for TSO</i>.<br>
			&lt;NTSO&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lines to &lt;/NTSO&gt; only generate
			if <i>not KICKS for TSO</i>.<br>
			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not assume 'not <i>
			KICKS for TSO'</i> means <i>'is KICKS for CMS'</i></font>
			</p>
			<p><font face="Courier New" size="2">&lt;CMS&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/CMS&gt; only generate if compiled on <i>KICKS for CMS</i>.<br>
			&lt;NCMS&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lines to &lt;/NCMS&gt; only generate
			if not <i>KICKS for CMS</i>.</font></p>
			<p><font face="Courier New" size="2">&lt;NOP&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			lines to &lt;/NOP&gt; do not generate.</font><p>
			<font face="Courier New" size="2">&lt;REM&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			for a one line remark. There is no &lt;/REM&gt;</font><p><font face="Courier New" size="2">&lt;KICKS&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lines to &lt;/KICKS&gt;
			only generate if -nokicks parm is not set<br>
			&lt;NOKICKS&gt;&nbsp;&nbsp;&nbsp;lines to &lt;/NOKICKS&gt; only
			generate if -nokicks parm is set&nbsp; </font>
			<p><font face="Courier New" size="2">&lt;SD&gt;, &lt;/SD&gt;, &lt;SN&gt; are used in
			connection with source code tracing and are explained in that
			section of the documentation.</font></td>
		</tr>
	</table>
</div>
<h3><a name="kicksapi"></a>KICKS (CICS) API</h3>

<p><font face="Times New Roman"><i><b>KICKS</b></i> tries to be compatible with the
application programming api (Application Programming Interface) as defined in <u>CICS Application Programming Reference</u>, SC33-1688,
available online as DFHP400.PDF. Another good reference to this api is Murach's
<u>CICS Desk Reference</u>.</font></p>
<p><font face="Times New Roman">The api is implemented using EXEC blocks. These
blocks are &quot;embedded&quot; in the host programming language (COBOL or GCCMVS), parsed
by a preprocessor that replaces the blocks with host language calls to a code
library, then the output from the preprocessor is compiled by the host language
compiler. </font> </p>
<p><font face="Times New Roman">The blocks start with <u>EXEC KICKS</u>, then
continue with the name of the function desired, followed by any required and
optional arguments for that function, and finish with an <u>END-EXEC</u>. A
block may be split over several lines and no continuation markup is required or
allowed within it, however individual parameters within the block should not be
split across lines. The block should be entirely upper case except, in the case
of GCCMVS, for lower case letters that are part of variable names used in
function arguments. No host language statements, including comments, should be
on any line of the block.</font></p>
<p><font face="Times New Roman">The sole exception to &quot;no host language
statements&quot; is that, in COBOL programs, a period may immediately follow the
END-EXEC (same line). This period will be placed&nbsp; immediately following the
code for the host language calls generated by the block. If no period follows
the END-EXEC the generated code will not contain any periods. This behavior is
useful when you need such a block inside a COBOL 'if' statement.</font></p>
<p><font face="Times New Roman">In GCCMVS programs the END-EXEC is replaced by a
semicolon.&nbsp; These semicolons are 'consumed' by the preprocessor and should
not be followed by further statements or comments on the same line. The code
generated for the host language calls will be bracketed &quot;{}&quot; so that blocks may
be safely placed within normal C constructs (such as 'if' statements).</font></p>
<p><font face="Times New Roman">The following table lists each supported
function with a description of its purpose, a syntax diagram, arguments, and
exceptional conditions. Syntax is shown for use in COBOL programs but use in
GCCMVS programs is identical except that the END-EXEC's are replaced with
semicolons.</font></p>
<p>Although none of the syntax diagrams show it, any of<font face="Times New Roman">
the functions in this table may be coded using the error recovery/reporting
arguments NOHANDLE, RESP(data-area), or RESP2(data-area). For RESP the data-area
is a PIC S9(4) COMP item (a &quot;short&quot; item for GCCMVS) which will receive a copy
of EIBRESP. For RESP2 the data-area is also PIC S9(4) COMP and will receive a
copy of EIBRESP2. If none of these are coded, &quot;Exceptional Conditions&quot; will
almost always cause an associated transaction abend. Further, regarding &quot;Exceptional
Conditions&quot;:</font></p>
<ul>
	<li><font face="Times New Roman">these are run-time conditions, not preprocessor
	diagnostics.</font></li>
	<li><font face="Times New Roman">reported conditions <i>should</i> be the same as
	CICS, but <i><b>KICKS</b></i> reports conditions as they are discovered and multiple
	conditions might not be discovered in the same order, which could result in CICS and
	<i><b>KICKS</b></i> reporting different conditions. </font></li>
</ul>
<table border="1" style="border-collapse: collapse" width="97%">
	<tr>
		<td width="131" valign="top"><b><a name="ABEND"></a>ABEND</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ABEND function forces the current task to terminate abnormally. If a HANDLE ABEND<font size="2"> </font>is in effect control will
			be transferred to the routine it specifies,
			otherwise control returns to <i><b>KICKS</b></i>.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS ABEND </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ABCODE(name)]
			</font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [NODUMP]
			</font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ABCODE(name) - specifies the 4 character ID used to title the
			storage dump and/or in the message produced for the terminal user.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NODUMP - a storage dump will be produced
			unless NODUMP is specified.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See HERC01.KICKSSYS.V1R5M0.TESTCOB(TESTPGM) for usage example.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="ADDRESS"></a>ADDRESS</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font></p>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ADDRESS function lets you access system information that's
			maintained in storage outside your program.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Syntax:</font></p>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS ADDRESS </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[COMMAREA(pointer-ref)]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [CSA(pointer-ref)]
			</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [CWA(pointer-ref)]
			</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[EIB(pointer-ref)]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [TCTUA(pointer-ref)]
			</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TIOA(pointer-ref)] </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TIOAUSED(pointer-ref)] </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TWA(pointer-ref)] </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font></p>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">COMMAREA(pointer-ref)
			- obtains the address of the current commarea.<br>&nbsp;</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">CSA(pointer-ref)
			- obtains the address of the Common System Area. The CSA address is
			not especially useful in either CICS or <b><i>KICKS</i></b> (since the CSA is OCO
			in both),
			but in CICS the pointer returned will always be an EVEN number, and
			in <i><b>KICKS</b></i> it will always be an ODD number (actually -1). This provides a way for a
			program to determine at run time if it is in <i><b>KICKS</b></i> or CICS.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">CWA(pointer-ref)
			- obtains the address of the Common Work Area.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EIB(pointer-ref)-
			obtains the address of the Exec Interface Block.<br>&nbsp;</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TCTUA(pointer-ref)
			- obtains the address of the Terminal User Area. </font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TIOA(pointer-ref)-
			obtains the address of the Terminal Input/Output Area. This area's
			address is available in <i><b>KICKS</b></i> but not in CICS. After a READ MAP,
			READ TEXT, SEND MAP,&nbsp; SEND TEXT, or SEND CONTROL the area pointed
			to will contain the raw 3270 data for the last READ or SEND.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TIOAUSED(pointer-ref)
			- obtains the address of a PIC S9(4) COMP item containing the number of characters of the TIOA
			currently used. This area's address is available in <i><b>KICKS</b></i> but not in CICS. TIOAUSED+1 is where the next character will go in
			an output TIOA. </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TWA(pointer-ref)-
			obtains the address of the Transaction Work Area.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Exceptional Conditions:</font></p>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font></p>
		<ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">One at a time! In CICS a
			single EXEC ADDRESS can obtain addresses of 1 or many of the above
			arguments, but </font><font face="courier new"><i><b>KICKS</b></i> </font>
			<font face="Courier New">requires that you code a separate EXEC ADDRESS
			for each of the arguments you need.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See HERC01.KICKSSYS.V1R5M0.TESTCOB(ASSADRTS) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="ASKTIME"></a>ASKTIME</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ASKTIME function lets you obtain the current time and date. This
			information is stored in two EIB fields: EIBTIME and EIBDATE. When a
			task is started those fields are updated to reflect the starting
			time and date for the task. ASKTIME simply updates those fields. You
			can also use the ABSTIME argument to specify a field where KICKS places
			an absolute time. You can then use this field in a FORMATTIME
			function to format the time in one of several ways.</font></blockquote>
		<p style="margin-top: 0; marginot

			
			
			
			
			
			
					tom: 0"><font face="courier new">
		Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS ASKTIME </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ABSTIME(data-area)] </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ABSTIME(data-area) - specifies an 8 byte area to receive the number
			of milliseconds elapsed since midnight January 1, 1900. Format is
			packed - PIC S9(15) COMP-3. This value may be passed to FORMATTIME
			to generate external representations of date and time.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(FMTTIME) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="ASSIGN"></a>ASSIGN</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ASSIGN function lets you obtain information from various
			<i><b>KICKS</b></i> system areas.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS ASSIGN </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			[ABCODE(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[ALTSCRNHT(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[ALTSCRNWD(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[COLOR(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[CWALENG(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[DEFSCRNHT(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[DEFSCRNWD(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[EWASUPP(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[EXTDS(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[FACILITY(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[FCI(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[HILIGHT(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			[LANGINUSE(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			[NATLANGINUSE(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[NETNAME(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[OPID(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[PARTNS(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[PROGRAM(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[PS(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[SCRNHT(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[SCRNWD(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[SYSID(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TCTUALENG(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TERMCODE(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TIOASIZE(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TWALENG(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[USERID(data-area)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ABCODE(data-area) - gets the
			abend code associated with a captured abend (HANDLE ABEND) into a
			PIC X(4) item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ALTSCRNHT(data-area)
			- gets the alternate screen height into a PIC S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ALTSCRNWD(data-area)
			- gets the alternate screen width into a PIC S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">COLOR(data-area)
			- gets the terminal's 'color' attribute into a PIC X item, which is
			high values if color is supported (low values otherwise).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">CWALENG(data-area)
			- gets the length of the Common Work Area (CWA) into a PIC S9(4)
			COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DEFSCRNHT(data-area)
			- gets the default screen height into a PIC S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DEFSCRNWD(data-area)
			- gets the default screen width into a PIC S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EWASUPP(data-area)
			- gets the terminal's 'erase write alternate' attribute into a PIC X
			item, which is high values if erase write alternate is supported
			(low values otherwise).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXTDS(data-area)
			- gets the terminal's 'extended data stream' attribute into a PIC X
			item, which is high values if extended data streams are supported
			(low values otherwise).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">FACILITY(data-area)
			- gets the terminal's ID into a PIC X(4) field.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">FCI(data-area)
			- gets the type of facility used by the task into a PIC X field. For
			<i><b>KICKS</b></i> this will always be X'01', meaning 'terminal'.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">HILIGHT(data-area)
			- gets the terminal's 'extended highlighting' attribute into a PIC X
			item, which is high values if extended highlighting is supported
			(low values otherwise).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			LANGINUSE(data-area) - gets the 3 byte mnemonic code showing the
			language in use. This 3 byte code has a 1-1 relationship with the 1
			byte NATLANGINUSE code.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NATLANGINUSE(data-area) - gets the 1 byte mnemonic code showing the
			language in use. This 1 byte code has a 1-1 relationship with the 3
			byte LANGINUSE code. </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The NATLANGINUSE code is directly specified with the NATLANG
			parameter in the <i><b>KICKS</b></i> SIT and may be overriden as
			usual during <i><b>KICKS</b></i> startup. It may be an upper case
			A-Z or 0-9. The default is 'E', aka 'ENU', aka US English. A table
			relating the codes to each other can be found in SC33-1688.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">NETNAME(data-area)
			- gets the terminal's ID into a PIC X(8) field.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">OPID(data-area)
			- gets the <u>operator id</u> (not userid!) into a PIC X(3) field.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">PARTNS(data-area)
			- gets the terminal's 'partition' attribute into a PIC X item, which
			is high values if partitions are supported (low values otherwise).
			Note that <i><b>KICKS</b></i> does not presently support terminal partitions.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">PROGRAM(data-area)
			- gets the name of the last loaded program (or mapset) into a PIC
			X(8) area.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">PS(data-area)
			- gets the terminal's 'programmed symbols' attribute into a PIC X
			item, which is high values if programmed symbols are supported (low
			values otherwise). Note that <i><b>KICKS</b></i> does not presently support
			programmed symbols.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">SCRNHT(data-area)
			- gets the current screen height into a PIC S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">SCRNWD(data-area)
			- gets the current screen width into a PIC S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">SYSID(data-area)
			- gets the 'system id' into a PIC X(4) item. In CICS the 'system id'
			is a unique id for each CICS system. In <i><b>KICKS</b></i> for TSO the 'system id' is the SMF id of the MVS system. 
			In <i><b>KICKS</b></i> for CMS the 'system id' is spaces.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TCTUALENG(data-area)
			- gets the length of the Terminal User Area (TCTTEUA) into a PIC
			S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TERMCODE(data-area)
			- gets a code defining the terminal type into a PIC S9(4) COMP item.
			Currently in <i><b>KICKS</b></i> this code will be either X'9902' (for a 3270
			terminal), or X'1800' (for the CRLP sequential terminal).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TIOASIZE(data-area)
			- gets the size of the TIOA (Terminal Input Output Area) into a PIC
			S9(4) COMP item. This is available in <i><b>KICKS</b></i> but not in CICS. </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TWALENG(data-area)
			- gets the length of the Transaction Work Area (TWA) into a PIC
			S9(4) COMP item.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">USERID(data-area)
			- gets the 'userid' (not the Operator id!) into a PIC X(8) item. In
			<i><b>KICKS</b></i> this is usually your TSO id.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">One at a time! In CICS a
			single EXEC ASSIGN can obtain information about 1 to 16 of the above, but </font><font face="courier new">
			<i><b>KICKS</b></i> </font><font face="Courier New">requires that you code a separate EXEC
			ASSIGN for each of those you need.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(ASSADRTS) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="DELAY"></a>DELAY</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The DELAY function lets you suspend your task until specified
			time interval has elapsed or a specified time of day has
			arrived.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS DELAY </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INTERVAL(hhmmss)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME(hhmmss)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FOR [HOURS(hh)] [MINUTES(mm)] [SECONDS(ss)]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UNTIL [HOURS(hh)] [MINUTES(mm)] [SECONDS(ss)]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">INTERVAL(hhmmss)
			- delay for an amount of time specified by the PIC S9(7) COMP-3
			variable hhmmss, where the top 2 digits (hh) are for the number of
			hours, the middle 2 digits (mm) are for the number of minutes, and
			the bottom 2 digits (ss) are for the number of seconds.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TIME(hhmmss)
			- delay until local time specified by the PIC S9(7) COMP-3
			variable hhmmss is reached. As in INTERVAL, hhmmss represents the
			hour, minute and second of the time, in this case local time at
			which to end the delay.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">FOR [HOURS(hh)] [MINUTES(mm)] [SECONDS(ss)]
			- delay for an 'INTERVAL' with the amount of time specified by
			HOURS(hh) and/or MINUTES(mm) and/or SECONDS(ss) where hh, mm, and ss
			are PIC S9(8) COMP variables.</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> <br>UNTIL [HOURS(hh)] [MINUTES(mm)] [SECONDS(ss)] -
			delay until local time specified by the HOURS(hh) and/or MINUTES(mm)
			and/or SECONDS(ss) variables is reached. As in FOR, hh, mm, and ss
			are PIC S9(8) COMP.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EXPIRED (aka eibresp=31)(aka abend AEI4) - (eibresp2=0) the time
			specified by TIME or UNTIL has already past. This can't happen for
			INTERVAL or FOR.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ (aka eibresp=16)(aka abend AEIP) -
			(eibresp2=0) the delay exceeds the SIT MAXDELY setting.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			Pick only one of INTERVAL, TIME,
			FOR, or UNTIL.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DELAYTST) for usage examples.</font></p>
			</li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="DELETEFILE"></a>DELETE </b>DATASET/FILE</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The DELETE function removes a record from a file. The record may
			have been previously read by a READ function with the UPDATE
			argument,
			or the record may be retrieved and deleted in a single operation by
			the DELETE function. The file can be a VSAM KSDS or RRDS, or a path,
			but not an ESDS. </font>
			</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS DELETE&nbsp; </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATASET(name) | FILE(name)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RIDFLD(data-area) KEYLENGTH(data-value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GENERIC NUMREC(data-area) RRN RBA</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DATASET(name) | FILE(name)
			- the 1-8 character name by which the VSAM file is accessed. This
			name must match an entry in the <i><b>KICKS</b></i> FCT.</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> <br>RIDFLD(data-area) -
			&quot;key&quot; defining the record to be deleted.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			KEYLENGTH(data-value) - the PIC S9(4) COMP length of the RIDFLD that
			is to be used to identify record(s) to be deleted. If GENERIC is specified this should be less
			than key length in the idcams DEFINE for the file, otherwise it
			should be exactly equal to the key length for idcams. If keylength
			is omitted the key size from the file definition is used.</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> <br>GENERIC -
			specifies that only part of the key (RIDFLD) is used to identify
			records to be deleted. All records whose first 'keylength' bytes
			match will be deleted.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">NUMREC(data-area)
			- a PIC S9(4) COMP receiving field that will be set to the number of
			records actually deleted.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RRN
			- specified that the RIDFLD is a relative record number for a VSAM
			RRDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it
			should not be specified).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RBA
			- specified that the RIDFLD is a relative byte address for a VSAM
			KSDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). </font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60&nbsp; - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99&nbsp; - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - invalid request</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 21&nbsp; - delete from ESDS not
				supported</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 22&nbsp; - GENERIC specified, but
				file is RRDS</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 25&nbsp; - generic, given
				keylength &gt; real keylength</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 26&nbsp; - not generic, given
				keylength != real keylength</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 31&nbsp; - RIDFLD not given, no
				prior &quot;READ FOR UPDATE&quot;</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 42&nbsp; - keylength &lt; 0</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 902 - should not happen
				(preprocessor allowed bad code?)</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 903 - RBA specified, but file is
				RRDS</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 904 - RRN specified, but file is
				KSDS</font></blockquote>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTFND - the specified record could not be
			located.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			<b><i>KICKS</i></b> does not report the DUPKEY condition as does
			CICS.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See the api test members TESTDKS, TESTDES, and TESTDRR (in
			HERC01.KICKSSYS.V1R5M0.TESTCOB) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="DELETEQTD">
		</a>DELETEQ
		</b>TD</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			The DELETEQ TD function deletes the records in&nbsp; transient data
			queue, reclaiming the space occupied by its records and removing any
			records that have not been read.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS DELETEQ TD QUEUE(name) END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			QUEUE(name) - Specifies the one to four character name of the
			destination queue to be deleted.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">DISABLED - the queue is disabled.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">INVREQ - the queue specifies an
			extrapartition queue. DELETEQ TD is only valid for intrapartition
			queues.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">QIDERR - the queue isn't defined in the DCT.</font></blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="DELETEQTS">
		</a>DELETEQ
		</b>TS</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The DELETEQ TS function deletes a temporary storage queue, deleting
			any records remaining in the queue and reclaiming the space used by
			the queue.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS DELETEQ TS QUEUE(name) END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			QUEUE(name) or QNAME(name) - Specifies the one to 16 character name of the
			temporary storage queue to be deleted.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			QIDERR - the queue doesn't exist.</font></blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="DEQ"></a>DEQ</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The DEQ function releases a user-defined resource that was reserved
			for exclusive use by an ENQ function issued by your task. Tasks of
			other <i><b>KICKS</b></i> users that have issued an ENQ
			function for the same resource will then be allowed to continue.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EXEC KICKS DEQ </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			RESOURCE(data-area) [LENGTH(data-value)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [LUW | TASK | MAXLIFETIME(data-area)] </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			RESOURCE(data-area) - identifies the resource to be released. If
			LENGTH is also specified the character string (up to 255 bytes)
			contained in the data-area is used to identify the resource. If
			LENGTH is omitted the address of the data-area identifies the
			resource.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value) - specifies a value
			indicating the length of the character sting specified in RESOURCE.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LUW - specifies that the resource was
			acquired with the LUW duration.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">TASK - specifies that the resource was
			acquired with the TASK duration.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAXLIFETIME(data-area) -&nbsp;specifies a
			value defining the acquired resource duration. Valid values are
			DFHVALUE(LUW)=246, and DFHVALUE(TASK)=233.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - the MAXLIFETIME value is invalid.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the LENGTH value is specified and
			is less than 1 or
			greater than 255.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			It is not an error to DEQ a resource that is not (or no longer) ENQ'ed.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(ENQDEQ) for
			usage examples.</font></li>
		</ul></td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="DUMP"></a>DUMP</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The DUMP function produces a storage dump but does not terminate the
			transaction. </font>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS DUMP </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DUMPCODE(data-value)
			| FROM(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;[ FLENGTH(data-value)&nbsp; | LENGTH(data-value) ]</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DUMPCODE(data-value) - Specifies a 1-4 character name that identifies the
			dump.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROM(data-area) - identifies a storage item
			that will be dumped and/or begins the storage to be dumped. If
			omitted a full transaction dump will be printed.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FLENGTH(data-value) - specifies the number
			of bytes of storage to be dumped. If length is omitted&nbsp; the
			preprocessor will pass the actual length of the FROM data-area.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			DUMP does not cause an abend; the transaction continues after the
			dump is produced. To generate a dump <u>and</u> an abend use the
			ABEND function.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			A transaction dump is produced automatically by most ABENDS, and
			much of the information in a transaction dump is available online
			using KEDF, so there is seldom a need to code a DUMP function.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">Many other arguments
			valid in CICS are allowed but are taken only as comments.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(ENTRTST) for
			usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="ENDBR"></a>ENDBR</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ENDBR function terminates a browse operation.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS ENDBR&nbsp;</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATASET(name) | FILE(name)
			</font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			</font><font face="Courier New">[REQID(data-value)]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the </font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">dataset.
			The dataset must be defined in the FCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">REQID(data-value) - specifies a PIC S9(4)
			COMP numeric value that identifies the browse operation. Normally used
			only when you need more than one browse active at a time. Default is
			zero.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60&nbsp; - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99&nbsp; - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - not browsing, no STARTBR in effect...</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members
			TESTBKS, TESTBKP, TESTBES, TESTBEP and TESTBRR (in
			HERC01.KICKSSYS.V1R5M0.TESTCOB) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="ENQ"></a>ENQ</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ENQ function reserves a user-defined resource for exclusive use
			by your task. All other <i><b>KICKS</b></i> users that issue an ENQ
			function for the same resource will be suspended until your task
			ends or does a DEQ function for the resource.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EXEC KICKS ENQ </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			RESOURCE(data-area) [LENGTH(data-value)]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [LUW | TASK | MAXLIFETIME(data-area)] </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			[NOSUSPEND]</font><p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			RESOURCE(data-area) - identifies the resource to be reserved. If
			LENGTH is also specified the character string (up to 255 bytes)
			contained in the data-area is used to identify the resource. If
			LENGTH is omitted the address of the data-area identifies the
			resource.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value) - specifies a value
			indicating the length of the character sting specified in RESOURCE.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LUW - specifies that the resource should be
			held until the end of the current <u>L</u>ogical <u>U</u>nit of <u>W</u>ork.
			This is the default.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">TASK - specifies that the resource should be
			held until the task ends.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAXLIFETIME(data-area) -&nbsp;specifies a
			value defining how long the resource should be held. Valid values
			are DFHVALUE(LUW)=246, and DFHVALUE(TASK)=233.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOSUSPEND - indicates that if the resource is
			already reserved, control is to be returned immediately to your
			program, with a failure notification</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ENQBUSY - indicates that another task has reserved the resource you
			specified</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - the MAXLIFETIME value is invalid.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the LENGTH value is less than 1 or
			greater than 255.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			It is not an error to ENQ a resource that your task already ENQ'ed.
			This simply increases your task's ENQ count for that resource. You
			should DEQ such resources the same number of times you ENQ'ed them.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			<i><b>KICKS</b></i> won't actually be enqueing anything if you don't
			specify LENGTH. That's because since each <i><b>KICKS</b></i> users
			is in a different address space the RESOURCE addresses won't match,
			and there is only one task in the user's own <i><b>KICKS</b></i>
			system.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(ENQDEQ) for
			usage examples.</font></li>
		</ul></td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="ENTER"></a>ENTER</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The ENTER function writes a user trace entry in the <i><b>KICKS</b></i>
			trace table (and to the auxiliary trace file is it is open). The
			trace table is displayed when a transaction dump is produced and may
			also be examined using KEDF.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS ENTER </font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; TRACENUM(data-value) | TRACEID(data-value)<br>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; FROM(data-area) FROMLENGTH(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
			RESOURCE(data-area) EXCEPTION</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			TRACENUM(data-value)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">TRACEID(data-value) - TRACENUM &amp; TRACEID are
			synonyms for a number (1-199) that will be used as the trace
			identifier to associate with this user trace entry.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROM(data-area) - a character field or
			literal that will be placed into the trace entry. Only the first 8
			of these can be stored in the internal trace table entry, but up to
			255 characters will be written to the auxiliary trace if it is
			available.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROMLENGTH(data-area) - the length of the
			FROM field.&nbsp;If fromlength is omitted&nbsp;the preprocessor
			will pass the actual length of the FROM data-area or literal.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">RESOURCE(data-area) - allowed as comments
			only, <i><b>KICKS</b></i> does not process.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">EXCEPTION - allowed as comments only, <i><b>
			KICKS</b></i> does not process.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See HERC01.KICKSSYS.V1R5M0.TESTCOB(ENTRTST) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="FORMATTIME"></a>FORMATTIME</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The FORMATTIME function accepts a time value in the absolute time
			format and returns a time value in any of several other formats.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS FORMATTIME ABSTIME(data-value)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DATESEP(data-value)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIMESEP(data-value)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YYDDD(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YYYYDDD(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YYMMDD(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YYYYMMDD(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YYDDMM(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YYYYDDMM(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DDMMYY(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DDMMYYYY(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMDDYY(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MMDDYYYY(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DAYCOUNT(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DAYOFWEEK(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DAYOFMONTH(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MONTHOFYEAR(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; YEAR(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TIME(data-area)<br>END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ABSTIME(data-value)
			- specifies a PIC S9(15) COMP-3 field containing the number of
			milliseconds elapsed since midnight January 1, 1900. This is usually
			obtained using the ASKTIME function.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATESEP(data-value) - specifies a 1 byte
			value to be used as a separator between the month, day, and year in
			data values. If you omit DATESEP no separator is used. In CICS the
			argument of DATESEP is optional; in <i><b>KICKS</b></i> it is not.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TIMESEP(data-value)
			- specifies a 1 byte value to be used as a separator between the
			hour, minute, and second in time values. If you omit TIMESEP no
			separator is used. In CICS the argument of TIMESEP is optional; in
			<i><b>KICKS</b></i> it is not.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">YYDDD(data-area)<br>YYYYDDD(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">YYMMDD(data-area)<br>YYYYMMDD(data-area)<br>YYDDMM(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">YYYYDDMM(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DDMMYY(data-area)</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DDMMYYYY(data-area</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">MMDDYY(data-area)<br>MMDDYYYY(data-area)
			- specifies a character field to contain the formatted date, format
			being as indicated. Day, month, and year values will be separated
			using DATESEP if that was also specified. Receiving field size
			should be as indicated plus the number of separators.</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			<br>DAYCOUNT(data-area) - specifies a PIC S9(8) COMP field to
			contain the number of days that have passes since January 1, 1900,
			which is day 1.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DAYOFWEEK(data-area)
			- specifies a PIC S9(8) COMP field to contain the day of the week.
			Sunday is day 0, Monday is day 1, ... </font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">DAYOFMONTH(data-area)
			- specifies a PIC S9(8) COMP field to contain the day of the month.
			The first is 1, the second is 2, ...</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			<br>MONTHOFYEAR(data-area) - specifies a PIC S9(8) COMP field to
			contain the month of the year. January is 1, February is 2, ...</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">YEAR(data-area)
			- specifies a PIC S9(8) COMP field to contain the four digit year.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">TIME(data-area)
			- specifies a character field to contain the formatted time, format
			being as hhmmss. Hours, minutes, and second values will be separated
			using TIMESEP if that was also specified. Receiving field size
			should be as indicated plus the number of separators.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - ABSTIME value is invalid (not a valid PIC S9(15) COMP-3
			number or specifies an invalid value). </font>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">One at a time! In CICS a
			single EXEC FORMATTIME can generate information up to all of the above, but </font><font face="courier new">
			<i><b>KICKS</b></i> </font><font face="Courier New">requires that you code a separate EXEC
			FORMATTIME for each of those you need. Pick one of: DATESEP and
			any of the date formats, or TIMESEP and TIME.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(FORMATIM) for
			usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="FREEMAIN"></a>FREEMAIN</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The FREEMAIN function releases storage that was previously acquired
			using the GETMAIN function.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EXEC KICKS FREEMAIN </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			DATA(data-area) | DATAPOINTER(pointer-ref)</font><p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DATA(data-area) - specifies the name of the variable to be freed.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATAPOINTER(pointer-ref) - specifies a
			pointer to the variable to be freed.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - storage specified not GETMAIN'ed (or perhaps previously
			FREEMAIN'ed).</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes</font><blockquote>
			<ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(GETFREE) for
			usage examples.</font></li>
		</ul>
		</blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="GETMAIN"></a>GETMAIN</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The GETMAIN function acquires a specified amount of storage that is
			held until a FREEMAIN function is issued to release it (or, in the
			case of storage acquired without the SHARED argument, end of task).</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EXEC KICKS GETMAIN </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			SET(pointer-ref) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LENGTH(data-value)| FLENGTH(data-value)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [INITIMG(data-value)] </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			[SHARED] [BELOW] [NOSUSPEND] [USERKEY] [CICSKEY]</font><p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			SET(pointer-ref) - specifies a variable to contain the address of
			the storage acquired.</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FLENGTH(data-value) - specifies a variable or
			literal value to indicate the length of storage to be acquired.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INITIMG(data-value) - specifies a 1 byte
			field or literal value used to initialize the storage acquired. If
			omitted the storage will not be initialized to any particular value.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">SHARED - specifies that the storage will not
			be automatically freed when the task ends. Instead it must be
			explicitly freed by a FREEMAIN function (by this task or by some
			future task).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOSUSPEND - default in <i><b>KICKS</b></i>, 
			accepted as comments.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">BELOW</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">USERKEY</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CICSKEY - these arguments are accepted as
			comments only</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font>
		    <blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			LENGERR - The specified length is less than one</font></p><br>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NOSTG - The requested storage is not available</font>
			</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			The NOSTG condition does not result in an abend. You must check 
			EIBRESP to ensure storage was actually obtained.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(GETFREE) for
			usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="HANDLEABEND">
		</a>HANDLE
		</b>ABEND</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The HANDLE ABEND function establishes an abend exit which receives
			control when an abend occurs.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<font face="Courier New">EXEC KICKS HANDLE ABEND<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LABEL(label) | CANCEL | RESET<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			LABEL(label) - specifies the paragraph or section name of a routine
			within the current program that is to be invoked (by GO TO) if the
			program abends.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CANCEL - specifies that the effect of a
			previously established HANDLE ABEND is to be cancelled.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">RESET - specifies that a previously cancelled
			HANDLE ABEND should be reestablished.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">Catches normal abends but
			not AICA, ASRA, or ASRB</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(LINKTST)
			for usage example.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="HANDLEAID"></a>HANDLE </b>AID</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The HANDLE AID function establishes routines that are invoked when
			an AID key is detected by a RECEIVE command.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<font face="Courier New">EXEC KICKS HANDLE AID<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; KEY-NAME(label) KEY-NAME(label) ...<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			KEY-NAME(label) - specifies the name of the AID key to be handled
			and the name of a paragraph or section that is to receive control
			(by GO TO) when the specified AID key is detected. If no label is
			specified any existing HANDLE for that AID is cancelled. The
			function recognizes AID names ENTER, CLEAR, PA1-3, and PF1-24.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">1 to16 at a time</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">KEY-NAMEs being ENTER,
			CLEAR, PA1, PA2, PA3, PF1, PF2, ... PF9, PF10, ... PF24</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			To cancel a previously issued HANDLE AID that associated some key
			with some label, just issue another HANDLE AID specifying the key
			without any label - ie - &quot;EXEC KICKS HANDLE AID <i>SOMEKEY</i>
			END-EXEC&quot;.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			HANDLE AID is not supported in GCCMVS <i><b>KICKS</b></i> programs.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See any of
			HERC01.KICKS.V1R5M0.COB(TAC?????) for
			usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="HANDLECONDITION"></a>HANDLE </b>CONDITION</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The HANDLE CONDITION function establishes routines that are invoked
			when certain exceptional conditions are detected. </font>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS HANDLE CONDITION<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONDITION-NAME(label) CONDITION-NAME(label)
		...<br>END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			CONDITION-NAME(label) - specifies the name of the condition to be
			handled and the name of a paragraph or section that is to receive
			control (by GO TO) when the specified condition is detected. If no
			label is specified any existing HANDLE for that condition is
			cancelled. The function recognizes the same condition names as
			DFHRESP.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">1 to16 at a time</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			To cancel a previously issued HANDLE CONDITION that associated some
			condition with some label, just issue another HANDLE CONDITION
			specifying the condition without any label - ie - &quot;EXEC KICKS HANDLE
			CONDITION <i>SOMECONDITION</i> END-EXEC&quot;.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			HANDLE CONDITION is not supported in GCCMVS <i><b>KICKS</b></i>
			programs.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See any of
			HERC01.KICKS.V1R5M0.COB(TAC?????) for
			usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="IGNORE"></a>IGNORE </b>CONDITION</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The IGNORE CONDITION function specifies that when certain
			exceptional conditions are detected the usual system action is
			ignored and control is returned to your program as usual.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS IGNORE CONDITION<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONDITION-NAME CONDITION-NAME ...<br>END-EXEC</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			CONDITION-NAME - specifies the name of the condition to be ignored.
			The function recognizes the same condition names as DFHRESP.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">1 to 16 at a time</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">CONDITION-NAMEs same as HANDLE
			CONDITION</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			There is a difference between HANDLE CONDITION no-label and IGNORE
			CONDITION. The former turns off handling of the condition, which
			means your transaction will abend if the condition occurs. The
			latter turns off the default action (abend) for the condition, so
			that if the condition occurs your transaction will continue and must
			itself detect the condition and take appropriate action.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			IGNORE CONDITION is not supported in GCCMVS <i><b>KICKS</b></i>
			programs.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="LINK"></a>LINK</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The LINK function invokes a program and optionally passes data to
			it. When the invoked program ends control returns to the statement
			following the LINK function.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS LINK PROGRAM(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[COMMAREA(data-area)
			[LENGTH(data-value)]]<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PROGRAM(name) - specifies the one to eight character name of the
			program to be invoked. The name must be defined in the PPT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">COMMAREA(data-area) - specifies a data area
			that is passed to the invoked program as a communication area. The
			invoked program access the data via its DFHCOMMAREA field, so it is
			the same storage in the invoking program and the invoked program,
			therefore the invoked program may change the storage and the
			invoking program will see the changes.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value) - the length of the data
			area specified in the COMMAREA argument. If length is omitted&nbsp;
			the preprocessor will pass the actual length of the COMMAREA
			data-area.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PGMIDERR - The program is not in the PPT</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - The PPT entry for the program is
			disabled (happens for example if the program is not present in the
			KIKRPL library concatenation).</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the LENGTH specified is to large.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(LINKTST)
			for usage example</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="LOAD"></a>LOAD</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The LOAD function retrieves an object module and returns the entry
			point and length. </font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS LOAD PROGRAM(name)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[LENGTH(data-area)
			| FLENGTH(data-area]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ENTRY(pointer-ref) | SET(pointer-ref) ]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [HOLD]<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PROGRAM(name) - specifies the one to eight character name of the
			object module to be loaded. The name must be defined in the PPT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - specifies an </font><font face="Courier New">
			S9(4) COMP</font><font face="courier new"> variable
			that is set to the length of the object module.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FLENGTH(data-area) - specifies an </font><font face="Courier New">
			S9(8) COMP</font><font face="courier new"> variable
			that is set to the length of the object module.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ENTRY(pointer-ref) - specifies an </font><font face="Courier New">
			S9(8) COMP</font><font face="courier new"> variable that is set to the entry point of the loaded object
			module.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">SET(pointer-ref) - specifies an </font><font face="Courier New">
			S9(8) COMP</font><font face="courier new"> variable that is set to the
			load point of the loaded object
			module.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">HOLD - specifies that the loaded object
			module will be retained in storage until it is RELEASE'd. If HOLD is
			not specified the object module will be deleted from storage when
			the task ends.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PGMIDERR - The program is not in the PPT</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - The PPT entry for the program is
			disabled (happens for example if the program is not present in the
			KIKRPL library concatenation).</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			An object's entry point (where your program calls it) is not necessarily the same as it's load
			point (where it begins in storage).</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			Automatic deletion of a LOAD'd object module at task end (due to not
			coding HOLD) will only occur if your task's LOAD was responsible for
			bringing the module into storage. If it was previously LOAD'd with a
			HOLD and your task's LOAD only returned its address the module will
			remain in storage until RELEASE'd (ie, the original HOLD will
			continue to be honored).</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.COB(KEDFPGM)
			for usage example (loading/modifying KEDFILTR).</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="READNEXT"></a>READNEXT</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The READNEXT function retrieves the next sequential record from a
			file during a browse operation. The file may be a VSAM KSDS, ESDS,
			RRDS, or a path.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS READNEXT&nbsp;DATASET(name) | FILE(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		INTO(data-area) LENGTH(data-area) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		RIDFLD(data-area) KEYLENGTH(data-area) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [RBA | RRN]
			[REQID(data-value)]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the dataset.
			The dataset must be defined in the FCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INTO(data-area) - specifies the area that
			will contain the record being read.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - PIC S9(4) COMP length
			of the record. On entry it should be set to the size of the INTO
			argument. On return it will be the size of the record actually
			retrieved. If length is omitted the record size from the file
			definition is used, and of course there is no feedback of the size
			of the actual record read.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> RIDFLD(data-area)
			- &quot;key&quot; defining the record to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">KEYLENGTH(data-value)
			- PIC S9(4) COMP length of RIDFLD that is to be used to identify
			record(s) to be read. If keylength is omitted the key size from the
			file definition is used.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RRN
			- specified that the RIDFLD is a relative record number for a VSAM
			RRDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RBA
			- specified that the RIDFLD is a relative byte address for a VSAM
			KSDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). </font></p>
			<p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">REQID(data-value) - specifies a PIC S9(4)
			COMP numeric value that identifies the browse operation. Normally used
			only when you need more than one browse active at a time. Default is
			zero.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60&nbsp; - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99&nbsp; - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - invalid request.</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 25&nbsp; -
			GENERIC &amp; KEYLENGTH given, </font>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but given
			KEYLENGTH &gt; real!</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 26&nbsp; -
			GENERIC not given, KEYLENGTH given, </font>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but
			KEYLENGTH &lt;&gt; real!</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 34&nbsp; - REQID
			not found - no STARTBR?</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 37&nbsp; - RBA/RRN
			does not match STARTBR</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 42&nbsp; -
			GENERIC &amp; KEYLENGTH given, but KEYLENGTH &lt; 0</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 905 - KEYLENGTH
			given with RBA/RRN</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the length of the record is
			longer than the LENGTH argument specifies.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DUPKEY - indicates that at least one more
			record of the same key exists. Occurs only when accessing the file
			via an alternate index path (that allows duplicate keys).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ENDFILE - indicates that there are no more
			records to read.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members TESTBKS, TESTBKP, TESTBES, TESTBEP and TESTBRR (in
			HERC01.KICKSSYS.V1R5M0.COB) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="READPREV"></a>READPREV</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The READPREV function retrieves the previous sequential record from
			a file during a browse operation. In other words, READPREV reads
			records backwards. The file may be a VSAM KSDS, ESDS, RRDS, or a
			path.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS READPREV&nbsp;DATASET(name) | FILE(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		INTO(data-area) LENGTH(data-area) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		RIDFLD(data-area) KEYLENGTH(data-area) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [RBA | RRN]
			[REQID(data-value)]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the </font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">dataset.
			The dataset must be defined in the FCT.</font></blockquote>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INTO(data-area) - specifies the area that
			will contain the record being read.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - PIC S9(4) COMP length
			of the record. On entry it should be set to the size of the INTO
			argument. On return it will be the size of the record actually
			retrieved. If length is omitted the record size from the file
			definition is used, and of course there is no feedback of the size
			of the actual record read.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> RIDFLD(data-area)
			- &quot;key&quot; defining the record to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">KEYLENGTH(data-value)
			- PIC S9(4) COMP length of RIDFLD that is to be used to identify
			record(s) to be read. If keylength is omitted the key size from the
			file definition is used.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RRN
			- specified that the RIDFLD is a relative record number for a VSAM
			RRDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RBA
			- specified that the RIDFLD is a relative byte address for a VSAM
			KSDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). </font></p>
			<p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">REQID(data-value) - specifies a PIC S9(4)
			COMP numeric value that identifies the browse operation. Normally used
			only when you need more than one browse active at a time. Default is
			zero.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60&nbsp; - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99&nbsp; - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - invalid request.</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 25&nbsp; -
			GENERIC &amp; KEYLENGTH given, </font>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but given
			KEYLENGTH &gt; real!</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 26&nbsp; -
			GENERIC not given, KEYLENGTH given, </font>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but
			KEYLENGTH &lt;&gt; real!</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 34&nbsp; - REQID
			not found - no STARTBR?</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 37&nbsp; - RBA/RRN
			does not match STARTBR</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 42&nbsp; -
			GENERIC &amp; KEYLENGTH given, but KEYLENGTH &lt; 0</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 905 - KEYLENGTH
			given with RBA/RRN</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the length of the record is
			longer than the LENGTH argument specifies.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DUPKEY - indicates that at least one more
			record of the same key exists. Occurs only when accessing the file
			via an alternate index path (that allows duplicate keys).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ENDFILE - indicates that there are no more
			records to read.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members TESTBKS, TESTBKP, TESTBES, TESTBEP and TESTBRR (in
			HERC01.KICKSSYS.V1R5M0.COB) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="READQTD"></a>READQ</b> TD</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The READQ TD function reads a record from a specified transient data
			queue (aka destination).</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS READQ TD QUEUE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INTO(data-area)
		LENGTH(data-area)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			NOSUSPEND</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			QUEUE(name) - Specifies the one to four character name of the
			destination queue to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			INTO(data-area) - specifies the data area that will contain the
			record to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			LENGTH(data-area) - specifies the S9(4) COMP data area that, on entry, contains
			the maximum number of characters of data that will fit in the INTO
			data area. On return it contains the number of characters actually
			read into the data area. </font><font face="courier new">If length
			is omitted the size of the INTO area is used, and of course there is
			no feedback of the size of the actual record read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NOSUSPEND - a <u>required</u> argument indicating immediate return
			(with RC) if the queue is not available (being used for output).</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			NOTOPEN - the queue is not opened. This is reported only on first
			access, thereafter DISABLED is reported.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			DISABLED - the queue is disabled.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">INVREQ - the queue type is extrapartition
			and it is opened for output (so it can't be read).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">QIDERR - the queue isn't defined in the DCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">QBUSY - the queue is being used by another
			<i><b>KICKS</b></i> user.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">QZERO - there are no (more) records in the
			queue. This is a normal 'end of file' condition.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DCPTST) for
			usage examples.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="Times New Roman">NOSUSPEND</font><font face="Courier New">
			is an optional argument in CICS, but is required in <i><b>KICKS</b></i>.
			</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="READQTS"></a>READQ</b>
		TS</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The READQ TS function reads a record from a specified temporary
			storage queue.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS READQ TS QUEUE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INTO(data-area)
		LENGTH(data-area)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [NUMITEMS(data-area)]
			[ITEM(data-value) | NEXT]</font><br><font face="Courier New">END-EXEC</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			QUEUE(name) or QNAME(name) - Specifies the one to 16 character name of the temporary storage
			queue to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INTO(data-area) - </font><font face="Courier New">specifies the data
			area that will contain the record to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			LENGTH(data-area) - </font><font face="Courier New">specifies the
			S9(4) COMP data area that, on entry, contains the maximum number of characters
			of data that will fit in the INTO data area. On return it contains
			the number of characters actually read into the data area.</font><font face="courier new">If length
			is omitted the size of the INTO area is used, and of course there is
			no feedback of the size of the actual record read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NUMITEMS(data-area) - specifies the </font><font face="Courier New">
			S9(4) COMP </font><font face="courier new">
			data area that, on return, will
			contain the total number of records in the specified queue.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NEXT</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ITEM(data-value) - specifies </font><font face="Courier New">the
			S9(4) COMP data area that, on entry, contains the </font>
			<font face="courier new">
			item number of the queue record to
			be retrieved, or, that the NEXT record should be retrieved.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			QIDERR - the queue doesn't exist.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ITEMERR - no record exists for the ITEM
			number requested. </font><font face="Courier New">This is a normal
			'end of file' condition.</font></blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="READFILE"></a>READ </b>DATASET/FILE</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The READ function retrieves one record from a file, which can be a
			VSAM KSDS, ESDS, RRDS, or path.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS READ&nbsp;DATASET(name) | FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INTO(data-area)
		LENGTH(data-area) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		RIDFLD(data-area) KEYLENGTH(data-area) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[GENERIC] [RBA | RRN] [GTEQ | EQUAL] [UPDATE]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the dataset.
			The dataset must be defined in the FCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INTO(data-area) - specifies the area that
			will contain the record being read.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - PIC S9(4) COMP length
			of the record. On entry it should be set to the size of the INTO
			argument. On return it will be the size of the record actually
			retrieved. If length is omitted the record size from the file
			definition is used, and of course there is no feedback of the size
			of the actual record read.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> RIDFLD(data-area)
			- &quot;key&quot; defining the record to be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">KEYLENGTH(data-value)
			- PIC S9(4) COMP length of RIDFLD that is to be used to identify
			record(s) to be read. If keylength is omitted the key size from the
			file definition is used.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RRN
			- specified that the RIDFLD is a relative record number for a VSAM
			RRDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RBA
			- specified that the RIDFLD is a relative byte address for a VSAM
			KSDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). </font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			GENERIC - specifies that only part of the key in the RIDFLD argument
			should be used, as indicated by the KEYLENGTH argument.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EQUAL - specifies that the record
			whose key matches the RIDFLD exactly will be read.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			GTEQ - specifies that the first
			record whose key is greater than or equal to the key specified in
			the RIDFLD argument will be read. This will always retrieve a record
			unless the specified key is greater than the largest in the
			file. </font></p>
			<p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			UPDATE - specifies your intent to update the retrieved record (by
			REWRITE'ing or DELETE'ing it). The record is held for your exclusive
			use (other tasks can't get it) until you do a REWRITE, DELETE, or
			UNLOCK for it - or until your task ends or you complete a logical
			unit of work (by issuing a SYNCPOINT).</font></p></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60&nbsp; - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99&nbsp; - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
		</blockquote>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the length of the record is
			longer than the LENGTH argument specifies.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DUPKEY - indicates that at least one more
			record of the same key exists. Occurs only when accessing the file
			via an alternate index path (that allows duplicate keys).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTFND - indicates that there is no record
			with the required key.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - invalid request.</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 26&nbsp; - not GENERIC and
				KEYLENGTH &lt;&gt; real key length.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 28&nbsp; - read to file with
				update already pending.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 902 - can't RBA &amp; RRN both,
				can't EQUAL &amp; GTEQ both</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 903 - can't RBA for RRDS.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 904 - can't RRN if not RRDS.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 905 - KEYLENGTH not allowed
				with ESDS, RRDS.</font></blockquote>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members
			TESTDKS, TESTDES, and TESTDRR (in HERC01.KICKSSYS.V1R5M0.COB) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="RECEIVEINTO"></a>RECEIVE</b> INTO</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The RECEIVE function retrieves input data sent from a terminal. BMS
			mapping is not used so the format of the received data will be that of a raw
			3270 input buffer (aka tioa, <u>T</u>erminal <u>I</u>nput/<u>O</u>utput
			<u>A</u>rea). </font>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			EXEC KICKS RECEIVE <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[INTO(data-area)] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[LENGTH(data-area)| FLENGTH(data-area)] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [MAXLENGTH(data-value) | MAXFLENGTH(data-value)] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ASIS] [BUFFER] [CHECK]<br>
			END-EXEC </font>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INTO(data-area) - specifies the name of the program variable that
			will contain the input data retrieved. If omitted a terminal read is
			still done, and the EIB is updated with the new aid and cursor
			address, but obviously no other data is made available.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - specifies the name of
			the program variable (PIC S9(4) COMP or short) that will contain
			the number of bytes retrieved.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FLENGTH(data-area) - specifies the name of
			the program variable (PIC S9(8) COMP or integer) that will contain
			the number of bytes retrieved.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAXLENGTH(data-value)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAXFLENGTH(data-value) - specifies the value
			or program variable that contains the maximum number of bytes to
			retrieve. If omitted, but LENGTH or FLENGTH is specified, the input
			value there is taken as the maximum number of bytes to retrieve. If
			neither MAXLENGTH/MAXFLENGTH nor LENGTH/FLENGTH is specified then the number of bytes
			to retrieve is taken to be zero.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ASIS - specifies that lower case letters are
			<u>not</u> be translated to upper case. </font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">BUFFER - specifies that the complete 3270
			buffer is returned, including the leading aid character and two
			character cursor address. If not specified these 3 characters are
			omitted (ie, returned data starts with the 4th character of the
			input buffer).</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CHECK - specifies that no data is to be read,
			rather an indication of whether the terminal has data ready is to be
			returned. If data is ready EIBAID will be equal to 'R' after the
			call, otherwise it will be 'N'. The operation also includes a 1/10
			second delay. When CHECK is specified all other arguments are
			ignored.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			LENGERR - available data exceeds MAXFLENGTH (or FLENGTH, see above. Not reported if INTO not specified.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			RECEIVE </font>
			<font face="Courier New">
			INTO is commonly used to retrieve data entered on the same line
			as the transaction id. One place you can see this is in the KEDF
			transaction, where it uses this command to see if you are doing a
			simple KEDF ON or a KEDF OFF before it puts up the full screen
			interface for a more complex interaction. </font><font face="courier new">
			RECEIVE </font>
			<font face="Courier New">
			MAP is much easier to
			use for other cases, primarily due to the complexity of the tioa's
			3270 data structure.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			LENGTH and MAXLENGTH (for use with S9(4) COMP or SHORT data items)
			not supported; use FLENGTH and MAXFLENGTH (for use with S9(8) COMP
			or INTEGER data items) instead.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			NOTRUNCATE is not supported. Any data read but not returned due to
			MAXFLENGTH (etal) is lost</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">In CICS ASIS is ineffective on the first
			RECEIVE of a task (ie, the <u>only</u> RECEIVE of a pseudo
			conversational task) but in <i><b>KICKS&nbsp;</b></i>it works on all
			RECEIVE's where it is coded.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CHECK is a &quot;<i><b>KICKS&nbsp;</b></i>only&quot; argument
			not supported in CICS.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(SRTEXT) for usage examples; also
			HERC01.KICKSSYS.V1R5M0.COB(KSGMPGM) for use of the CHECK argument.</font></p></li>
		</ul></td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="RECEIVEMAP"></a>RECEIVE</b> MAP</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The RECEIVE MAP function reads data from a terminal and formats it
			using BMS map definitions.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			EXEC KICKS RECEIVE MAP(name) MAPSET(name) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [INTO(data-area)] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ASIS] <br>
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			MAP(name) - the one to seven character name of the bms map to be
			used to map the input data.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAPSET(name) - the one to seven character
			name of the bms mapset that contains the map named in MAP(name).
			This object must be defined in the PPT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INTO(data-area) - specifies the data area
			that will contain the mapped input data. This is usually the COPY'ed
			symbolic map generated by the MAPGEN procedure. If INTO is not
			specified the mapped area is assumed to be the MAP name suffixed by
			an &quot;I&quot;.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ASIS - specifies that lower case letters
			are not to be made upper case.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			MAPFAIL - The data cannot be formatted</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			RECEIVE MAP and SEND MAP can also generate Exceptional Conditions as
			documented under the LOAD function if the MAPSET is not in the PPT,
			is disabled, is not in the KIKRPL concatenation, etc.</font></p>
			</li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">In CICS ASIS is ineffective on the first
			RECEIVE of a task (ie, the <u>only</u> RECEIVE of a pseudo
			conversational task) but in <i><b>KICKS&nbsp;</b></i>it works on all
			RECEIVE's where it is coded.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(SRMAP) for usage examples.</font></p>
			</li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="RELEASE"></a>RELEASE</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The RELEASE function removes a previously LOAD'ed object module from
			storage.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC KICKS RELEASE PROGRAM(name) END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">PROGRAM(name) - specifies the one to eight character name of the
			object module to be loaded. The name must be defined in the PPT.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PGMIDERR - The program is not in the PPT</font></blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="RESETBR"></a>RESETBR</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The RESETBR function resets the current position of a browse
			operation. It is, in effect, the same as an ENDBR for the file
			followed by a STARTBR with the same (as the RESETBR) arguments.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new"><i><b>KICKS</b></i> in fact implements
			RESETBR <u>exactly</u> as ENDBR followed by STARTBR.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS RESETBR DATASET(name) | FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		RIDFLD(data-area) KEYLENGTH(data-value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [GENERIC]] [RBA | RRN] [GTEQ | EQUAL]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [REQID(data-value)]<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			See STARTBR arguments...</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			See ENDBR and STARTBR conditions...</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members TESTBKS, TESTBKP, TESTBES, TESTBEP and TESTBRR (in the TESTFILE VMARC
			file) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="RETURN"></a>RETURN</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The RETURN function terminates program execution; the invoking
			program regains control.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS RETURN </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[TRANSID(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		[COMMAREA(data-area) LENGTH(data-value)]]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			TRANSID(name) - specifies the one to four character name of the
			transaction to be invoked when the terminal operator presses an AID
			key. The transaction id must be defined in the PCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">COMMAREA(data-area) - specifies a data area
			that is passed to the
			next execution of a pseudo-conversational program.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value) - the length of the data
			area specified in the COMMAREA argument. If length is omitted&nbsp;
			the preprocessor will pass the actual length of the COMMAREA
			data-area.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - TRANSID/COMMAREA given when the program returning is not
			'at the highest level'.&nbsp; </font>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			When you LINK to a program it must do a simple RETURN (no TRANSID/COMMAREA).
			Only a program that ran as a result of a user transaction (or a
			program that was XCTL'ed to - not LINK'ed to - that program) may
			(but is not required to) use TRANSID/COMMAREA.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(LINKTST)
			for usage example.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="REWRITE"></a>REWRITE</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The REWRITE function updates a record in a file. The record must
			have been previously read with a READ function with the UPDATE
			argument. The file may be a VSAM KSDS, ESDS, RRDS, or path.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS REWRITE&nbsp;DATASET(name) | FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM(data-area)
		LENGTH(data-area)</font><br><font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the </font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">dataset.
			The dataset must be defined in the FCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROM(data-area) - specifies the area that
			contains the record being written.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - PIC S9(4) COMP length
			of the record. On entry it should be set to the size of record to be
			written, not the length of the FROM
			argument (unless they are the same). If length is omitted the record
			size from the file definition is used.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60 - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99 - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
		</blockquote>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the LENGTH argument specifies a
			record longer than allowed for the file.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DUPKEY - the record contains an alternate
			key value that already exists or the alternate index does not allow
			duplicate keys and the alternate index is part of the file's upgrade
			set.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - the request is invalid.</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 30&nbsp; - no prior READ with
				UPDATE.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 23&nbsp; - the key does not
				match the old key (or the record is truncated short of the full
				key).</font></blockquote>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			A REWRITE may not change the primary key.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members TESTDKS, TESTDES, and TESTDRR (in HERC01.KICKSSYS.V1R5M0.TESTCOB) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SENDTEXT"></a>SEND </b>TEXT</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SEND TEXT function lets you send text to a terminal. A map is
			not used, instead BMS just writes the data to the screen as is.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTE that &quot;TEXT&quot; is optional, that is, you
			could say &quot;SEND TEXT FROM()...&quot; or just &quot;SEND FROM()...&quot;.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			EXEC KICKS SEND TEXT <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM(data-area) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LENGTH(data-area) | FLENGTH(data-area)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [STRFIELD]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ERASE] [ALARM] [FREEKB] [ALTERNATE] [DEFAULT]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [CURSOR(data-value)] </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FROM(data-area) - specifies the data area containing the text to
			send.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) </font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FLENGTH(data-area) - specifies the length of
			the FROM data-area. If length is omitted&nbsp; the preprocessor will
			pass the actual length of the FROM data-area.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">STRFIELD </font><font face="courier new">- specifies that
			the FROM field contains a complete 3270 data stream that should be
			sent exactly as is. If you specify STRFIELD you may not specify any
			of the following arguments (ERASE, ALARM, FREEKB, ALTERNATE,
			DEFAULT, or CURSOR) as those choices should be explicit in the FROM
			field. </font>
			<p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ERASE - specifies that before writing the
			data the screen should be erased.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ALARM - specifies that the terminal alarm
			(bell?) should sound.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FREEKB - specifies that the terminal
			keyboard should be unlocked.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ALTERNATE - specifies that alternate screen
			size should be selected.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DEFAULT - specifies that default screen
			size should be selected. Documentation only, sometimes used to make
			it explicit when also using sends with ALTERNATE.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CURSOR(data-value) - specifies where the
			cursor is to be placed.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">When using the STRFIELD argument the FROM
			field may contain a leading escape character (hex 27), but that is
			not required. It must contain the 3270 write command and the 3270
			WCC sequence. </font>
			</li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			When NOT using the STRFIELD argument the characters of the FROM
			field are written to the screen in groups of 78 characters (for an
			80 column screen, corresponding more for larger) per line.
			For example if you send 100 characters using ERASE, the first 78
			characters will be on the first line, the remaining 22 characters on
			the 2nd line. This is a little different from CICS, which tries to assure 'words' are not broken in the line
			wrapping.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See HERC01.KICKSSYS.V1R5M0.COB(KSSFPGM) for an example of STRFIELD
			usage.</font></p></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(SRTEXT) for an example of more common
			usage without STRFIELD.</font></p>
			</li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SENDMAP"></a>SEND </b>MAP</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SEND MAP function sends data to a terminal, mapping it according
			to the specifications in a BMS map.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			EXEC KICKS SEND MAP(name) MAPSET(name) <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [FROM(data-area)] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ERASEAUP] [ERASE] [ALARM] [FREEKB] [FRSET] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [MAPONLY] [DATAONLY] [ALTERNATE] [DEFAULT]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [CURSOR(data-value)] <br>
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			MAP(name) - the one to seven character name of the bms map to be
			used to map the output data.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAPSET(name) - the one to seven character
			name of the bms mapset that contains the map named in MAP(name).
			This object must be defined in the PPT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROM(data-area) - specifies the name of the
			program variable that contains the data to be sent. This is usually
			the COPY'ed symbolic map generated by the MAPGEN procedure. If FROM
			is not specified the mapped area is assumed to be the MAP name
			suffixed by an &quot;O&quot;.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ERASEAUP - specifies that before writing
			the data all the unprotected fields already on the screen should be
			erased.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FRSET - specifies that the modified data
			tag (MDT) for each attribute character is reset to zero.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAPONLY - specifies that only constant data
			from the map is sent; the FROM area is unused.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATAONLY - specifies that the FROM area
			data is to be sent, but constant data from the map is not sent.</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ERASE - specifies that before writing the
			data the screen should be erased.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ALARM - specifies that the terminal alarm
			(bell?) should sound.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FREEKB - specifies that the terminal
			keyboard should be unlocked.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ALTERNATE - specifies that alternate screen
			size should be selected.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DEFAULT - specifies that default screen
			size should be selected. Documentation only, sometimes used to make
			it explicit when also using sends with ALTERNATE.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CURSOR(data-value) - specifies where the
			cursor is to be placed.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			MAPFAIL - The data cannot be formatted.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><font face="Courier New"> </font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			SEND MAP and RECEIVE MAP can generate Exceptional Conditions as
			documented under the LOAD function if the MAPSET is not in the PPT,
			is disabled, is not in the KIKRPL concatenation, etc.</font></p>
			</li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(SRMAP) for usage examples.</font></p>
			</li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SENDCONTROL"></a>SEND </b>CONTROL</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SEND CONTROL function lets you send device control commands to a
			terminal. No mapped data is sent.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			EXEC KICKS SEND CONTROL <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ERASE] [ALARM] [FREEKB] [ALTERNATE] [DEFAULT]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ERASEAUP] [FRSET] <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [CURSOR(data-value)] <br>
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ERASEAUP - specifies that before writing the data all the
			unprotected fields already on the screen should be erased.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FRSET - specifies that the modified data
			tag (MDT) for each attribute character is reset to zero.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ERASE - specifies that before writing the
			data the screen should be erased.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ALARM - specifies that the terminal alarm
			(bell?) should sound.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FREEKB - specifies that the terminal
			keyboard should be unlocked.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ALTERNATE - specifies that alternate screen
			size should be selected.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DEFAULT - specifies that default screen
			size should be selected. Documentation only, sometimes used to make
			it explicit when also using sends with ALTERNATE.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CURSOR(data-value) - specifies where the
			cursor is to be placed.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><p style="margin-top: 0; margin-bottom: 0">
		&nbsp;<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><font face="Courier New"> </font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(SRTEXT) for usage examples.</font></p>
			</li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SIGNOFF"></a>SIGNOFF</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SIGNOFF function initiates <i><b>KICKS</b></i> shutdown.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS SIGNOFF END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">Notes:</font><font face="Courier New">
		</font>
		<ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			See the KSSFPGM COBOL program for usage examples.</font></p></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="STARTBR"></a>STARTBR</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The STARTBR function initiates a browse operation so that records
			can be retrieved using READNEXT and/or READPREV functions.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS STARTBR&nbsp;DATASET(name) | FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		RIDFLD(data-area) KEYLENGTH(data-value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [GENERIC] [RBA | RRN] [GTEQ | EQUAL]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [REQID(data-value)]<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the </font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">dataset.
			The dataset must be defined in the FCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> RIDFLD(data-area)
			- &quot;key&quot; defining the record where the browse is to begin.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">KEYLENGTH(data-value)
			- PIC S9(4) COMP length of RIDFLD argument. If keylength is omitted
			the key size from the file definition is used.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			GENERIC - specifies that only part of the key in the RIDFLD argument
			should be used, as indicated by the KEYLENGTH argument.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RRN
			- specified that the RIDFLD is a relative record number for a VSAM
			RRDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RBA
			- specified that the RIDFLD is a relative byte address for a VSAM
			KSDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). </font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			EQUAL - specifies that positioning will be established at the record
			whose key matches the RIDFLD exactly. If no such record exists the
			NOTFND condition is raised and the browse is not started.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			GTEQ - specifies that positioning will be established at the first
			record whose key is greater than or equal to the key specified in
			the RIDFLD argument. This will always establish positioning in the
			file unless the specified key is greater than the largest in the
			file. </font></p>
			<p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">REQID(data-value) - specifies a PIC S9(4)
			COMP numeric value that identifies the browse operation. Normally used
			only when you need more than one browse active at a time. Default is
			zero.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60 - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99 - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
		</blockquote>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - invalid request.</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 25&nbsp; -
			GENERIC &amp; KEYLENGTH given, </font>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but given
			KEYLENGTH &gt; real!</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 26&nbsp; -
			GENERIC not given, KEYLENGTH given, </font>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but
			KEYLENGTH &lt;&gt; real!</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 33&nbsp; - REQID
			already used for active browse</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 42&nbsp; -
			GENERIC &amp; KEYLENGTH given, but KEYLENGTH &lt; 0</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 901 - no space
			for another active REQID</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 902 - can't RBA
			&amp; RRN both</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 903 - can't RBA
			for RRDS file</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 904 - can't RRN
			for non-RRDS file</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp; RESP2 = 905 - can't RBA
			for RRDS file</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTFND - The specified record could not be
			located.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			A browse operation may be:</font><ul>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">A direct browse of a key sequenced data
				set (KSDS) by record key.</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">A direct browse of an entry sequenced
				data set (ESDS) by relative byte address (RBA).</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">A direct browse of a relative record
				data set (RRDS) by relative record number (RRN).</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">A browse of a key sequenced data set (KSDS)
				using an alternate index path.</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">A browse of an entry sequenced data set
				(ESDS) using an alternate index path. In this case, an ESDS is
				browsed by key in the same way as a KSDS. Some of the options
				that are not valid for a direct ESDS browse are valid for an
				alternate index browse.</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">A browse of a KSDS by RBA.</font></li>
			</ul>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			The options specified on the STARTBR command define the
			characteristics that apply throughout the subsequent browse
			operation. </font>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">Specifically, if GENERIC or GTEQ are
			specified, they are used not only when determining the starting
			point of the browse, but also whenever the value of RIDFLD is
			changed before issuing a READNEXT command.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">If you specify the RBA option, it applies
			to every READNEXT or READPREV command in the browse, and causes CICS
			to return the relative byte address of each retrieved record.</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">None of these options can be changed during
			a browse, except by means of the RESETBR command. </font>
			<p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">Positioning to read forward from the first
			record:</font><ul>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">KSDS - use a key of low-values.</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">ESDS - use an RBA of +0.</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">RRDS - use an RRN of +1.</font></li>
			</ul>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">Positioning to read backward from the last
			record:</font><ul>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">KSDS - use a key of high-values. </font>
				</li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">ESDS - use an RBA of high-values.</font></li>
				<li>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="Courier New">RRDS - use an RRN of high-values.</font></li>
			</ul>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">Reading forward or backward then is just a
			series of repeated READNEXT or READPREV's.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
		<font face="Courier New">See the api test members TESTBKS, TESTBKP,
		TESTBES, TESTBEP and TESTBRR (in HERC01.KICKSSYS.V1R5M0.TESTCOB) for usage examples.</font></p>
		</blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SPOOLOPEN"></a>SPOOLOPEN </b>
		OUTPUT</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SPOOLOPEN OUTPUT function opens a file for sysout (or, special
			case, the internal reader). It can be used to send output to
			printers or to submit jobs.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS SPOOLOPEN OUTPUT<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TOKEN(data-area) NODE(data-value) [ CLASS(data-value)
		]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; USERID(data-value)
		| WRITER(data-value)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="Courier New">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			TOKEN(data-area) - specifies an 8 character field where <i><b>KICKS</b></i>
			will store a token that must be used in subsequent SPOOLWRITE and
			SPOOLCLOSE operations for this file.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">NODE(data-value) - specifies an 8 character
			value used as a DESTINATION for the sysout.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">CLASS(data-value) - specifies an 1
			character sysout class. Default=A.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">USERID</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">WRITER(data-value) - synonyms for an 8
			character userid for the sysout. Code this as 'INTRDR&nbsp; ' if you
			want to submit jobs instead of sending the output to a printer.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="Courier New">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			NOTOPEN - the open failed</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp; RESP=19, RESP2=8,&nbsp; to many
			sysouts already open</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp; RESP=19, RESP2=9,&nbsp; intrdr
			allocation failed</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp; RESP=19, RESP2=10, normal allocation
			failed</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp; RESP=19, RESP2=11, allocated sysout
			open failed</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="Courier New">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			CICS implements the SPOOLxxx functions with a direct interface to
			the spooler, but <i><b>KICKS</b></i> simply uses dynamically
			allocated sysout's (including, as necessary, INTRDR sysout's).</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">SPOOLOPEN INPUT not
			supported. This means <i><b>KICKS</b></i> can send jobs or printout
			to JES, but can't retrieve items that are in the JES queues.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">WRITER, as a synonym for
			USERID, is <i><b>KICKS</b></i> only (CICS doesn't use it).</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			USERID &amp; NODE are both required. Use USERID('*') and NODE('*') for
			local output.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			You can have several sysout files open at once (each with their own
			token).</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DCPTST) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SPOOLWRITE"></a>SPOOLWRITE</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SPOOLWRITE function writes records to a previously opened sysout.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS SPOOLWRITE<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TOKEN(data-area) FROM(data-area) FLENGTH(data-value)<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			TOKEN(data-area) - </font><font face="Courier New">specifies an 8
			character field where <i><b>KICKS</b></i> stored a SPOOLOPEN token.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROM(data-area) - a data area containing the
			record to be written.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FLENGTH(data-value) - the length of the data
			area to be written. If flength is omitted the preprocessor will pass
			the actual length of the FROM data-area.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			NOTOPEN - the sysout was not opened.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">LENGERR - invalid FLENGTH</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp; RESP=22, RESP2=0,&nbsp; FLENGTH &lt;0
			or &gt;32767</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp; RESP=22, RESP2&lt;&gt;0, FLENGTH is
			'RESP2' characters
			to big</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">SPOOLREAD not supported.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DCPTST) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SPOOLCLOSE"></a>SPOOLCLOSE</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SPOOLCLOSE function closes a previously opened sysout file.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS SPOOLCLOSE TOKEN(data-area) END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			TOKEN(data-area) - </font><font face="Courier New">specifies an 8
			character field where <i><b>KICKS</b></i> stored a SPOOLOPEN token.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			NOTOPEN - the sysout was not opened.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			Any open sysouts are automatically closed when at the end of a
			logical unit of work (task end or SYNCPOINT).</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DCPTST) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SUSPEND"></a>SUSPEND</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SUSPEND function returns control to <i><b>KICKS</b></i>, ever so
			briefly. The purpose of doing so it to reassure <i><b>KICKS</b></i>
			that your program is still functioning properly so it doesn't
			generate an AICA (run away task, aka timeout) abend.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS SUSPEND END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="SYNCPOINT"></a>SYNCPOINT</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The SYNCPOINT function announces the end of a logical unit of work
			within a task. </font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS SYNCPOINT [ROLLBACK] END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ROLLBACK - indicates that file and database changes in the current
			logical unit of work should not be committed, but instead discarded.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			None</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DELAYTST) for usage examples</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			Like CICS, no feedback is provided to your application as to the
			success (or failure) of the COMMIT or ROLLBACK. </font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			The current version of <i><b>KICKS</b></i>
			does not itself attempt any action at all for a ROLLBACK request,
			however</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			a SYNCPOINT exit may be used for additional COMMIT
			and/or ROLLBACK processing, for example to automate database
			commits/rollbacks. This exit is also appropriately driven at task
			end (normal or abend). See HERC01.KICKSSYS.V1R5M0.COB(SYNCXIT) for a
			sample exit program.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="UNLOCK"></a>UNLOCK</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The UNLOCK function releases a record that was held by a READ with
			the UPDATE argument.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">EXEC
		KICKS UNLOCK&nbsp;DATASET(name) | FILE(name)&nbsp; END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the </font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">dataset.
			The dataset must be defined in the FCT.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60 - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99 - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
		</blockquote>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">It would seem UNLOCK should report an error when the file was not
			locked, but it does not...</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members TESTDKS, TESTDES, and TESTDRR (in
			HERC01.KICKSSYS.V1R5M0.TESTCOB) for usage examples..</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="WRITEFILE"></a>WRITE </b>DATASET/FILE</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The WRITE function writes one record to a file, which can be a VSAM
			KSDS, ESDS, RRDS, or path.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS WRITE DATASET(name) | FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM(data-area)
		LENGTH(data-area)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		RIDFLD(data-area) KEYLENGTH(data-area)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [RBA | RRN]</font><br>
			<font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FILE(name)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DATASET(name) - synonyms for the one to
			eight character name of the dataset.
			The dataset must be defined in the FCT.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">FROM(data-area) - specifies the area that
			contains the record being written.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-area) - PIC S9(4) COMP length
			of the record. On entry it should be set to the size of record to be
			written, not the length of the FROM
			argument (unless they are the same). If length is omitted the record
			size from the file definition is used.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0"><font face="courier new"> RIDFLD(data-area)
			- &quot;key&quot; defining the record to be written.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">KEYLENGTH(data-value)
			- PIC S9(4) COMP length of RIDFLD that is to be used to identify
			record(s) to be written. If keylength is omitted the key size from
			the file definition is used.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RRN
			- specified that the RIDFLD is a relative record number for a VSAM
			RRDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). Note that the RRN for the 1st record is 1.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">RBA
			- specified that the RIDFLD is a relative byte address for a VSAM
			KSDS, so RIDFLD should be defined as PIC S9(8) COMP and KEYLENGTH
			will default to 4 (it should not be specified). </font></p>
			</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			DSIDERR (aka FILENOTFOUND) - The DATASET | FILE is not defined in
			the FCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - the DATASET | FILE is defined in
			the FCT, but it is 'disabled', probably because it previously failed
			to open</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOTOPEN - the DATASET | FILE did not open</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 60 - open failed due to VSAM open
				error, causes file to be marked 'disabled'.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 99 - open failed due to enqueue
				failure, does NOT disable</font></blockquote>
		</blockquote>
		<blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">ILLOGIC - VSAM error. See EIBRCODE bytes 2,3,4,5 for VSAM rplrtncd,
			rplerrcd, rplfuncd, and rplcmpon</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 110 - undifferentiated.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = -1&nbsp; - should not happen
				</font>
			</blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">IOERROR - an I/O error occurred.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the LENGTH argument specifies a
			record longer than allowed for the file.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DUPKEY - a record already exists with that
			key. Can also occur if the record contains an alternate key value
			that already exists or the alternate index does not allow duplicate
			keys and the alternate index is part of the file's upgrade set.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NOSPACE - there isn't enough space in the
			file to hold the new record.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">INVREQ - the request is invalid.</font><blockquote>
				<p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 23&nbsp; - embedded key does
				not match RIDFLD.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 26&nbsp; - not GENERIC and
				KEYLENGTH &lt;&gt; real key length.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 902 - can't RBA &amp; RRN both,
				can't EQUAL &amp; GTEQ both</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 903 - can't RBA for RRDS.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 904 - can't RRN if not RRDS.</font><p style="margin-top: 0; margin-bottom: 0">
				<font face="courier new">RESP2 = 905 - KEYLENGTH not allowed
				with ESDS, RRDS.</font></blockquote>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			A WRITE to a file cancels any pending READ UPDATE's.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See the
			api test members TESTDKS, TESTDES, and TESTDRR (in
			HERC01.KICKSSYS.V1R5M0.TESTCOB) for usage examples..</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="WRITEOPERATOR"></a>WRITE </b>OPERATOR</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The WRITE OPERATOR function sends a message to one or more system
			operator consoles, and, optionally, waits for a reply, and
			optionally, times out the reply.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS WRITE OPERATOR <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TEXT(data-area) [TEXTLENGTH(data-value)]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ROUTECODES(data-area) [NUMROUTES)data-value)]]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ACTION(data-value) | EVENTUAL | IMMEDIATE |
		CRITICAL]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [REPLY(data-area) MAXLENGTH(data-value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REPLYLENGTH(data-area) [TIMEOUT(data-value)]]</font><br>
			<font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			TEXT(</font><font face="Courier New">data-area</font><font face="courier new">)
			- the message to be sent to the console(s).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">TEXTLENGTH(</font><font face="Courier New">data-value</font><font face="courier new">)
			- the length of the message (less than 160). If textlength is
			omitted the preprocessor will pass the actual length of the TEXT
			data-area.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ROUTCODES(</font><font face="Courier New">data-area</font><font face="courier new">)
			- a list of 1 byte route codes that indicate to which operator(s)
			the message should be sent. Each route code is a binary number 1 -
			28. The default is 2.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">NUMROUTES(</font><font face="Courier New">data-value</font><font face="courier new">)
			- the number of routes in ROUTCODES. 1 - 28. Required if ROUTCODES
			specified.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">IMMEDIATE</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">EVENTUAL</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">CRITICAL</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ACTION(</font><font face="Courier New">data-value</font><font face="courier new">)
			- The Action code associated with the message. For ACTION the valid
			values are 2=IMMEDIATE, 3=EVENTUAL, 11=CRITICAL. The default is
			IMMEDIATE.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">REPLY(</font><font face="Courier New">data-area</font><font face="courier new">)
			- The message requires a reply, which will be placed in the
			data-area given.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">MAXLENGTH(</font><font face="Courier New">data-value</font><font face="courier new">)
			- the maximum length of the reply. If maxlength is omitted the
			preprocessor will pass the actual length of the REPLY data-area.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">REPLYLENGTH(</font><font face="Courier New">data-area</font><font face="courier new">)
			- the length of the reply the operator typed.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">TIMEOUT(</font><font face="Courier New">data-value</font><font face="courier new">)
			- the number of seconds the operator has to reply before <i><b>KICKS</b></i>
			times out the reply and returns EXPIRED.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			INVREQ - one of the values ROUTECODES, NUMROUTES or ACTION was
			invalid. </font>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">EXPIRED - The reply timeout expired without
			operator reply.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			A wait for operator reply could be while. so you should consider
			using SYNCPOINT to release held resources before use WRITE OPERATOR
			w/REPLY.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(WTOTST) for usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="WRITEQTD"></a>WRITEQ</b> TD</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The WRITEQ TD function writes a record to a transient data queue
			(aka destination).</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS WRITEQ TD QUEUE(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		FROM(data-area) LENGTH(data-area)</font><br><font face="courier new">END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			QUEUE(name) - Specifies the one to four character name of the
			destination queue to be written.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			FROM(data-area) - specifies the data area that will contains the
			record to be written.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			LENGTH(data-area) - specifies the S9(4) COMP data area that contains
			the number of characters to write from the FROM data area. </font>
			<font face="courier new">If length is omitted the preprocessor will
			pass the actual length of the FROM data-area.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">NOTOPEN - the queue is not opened. This is reported only on first
			access, thereafter DISABLED is reported.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">DISABLED - the queue is disabled.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">INVREQ - the queue type is extrapartition
			and it is opened for input (so it can't be written).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">QIDERR - the queue isn't defined in the DCT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">LENGERR - the length specified is greater
			than the maximum allowed for this queue.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">NOSPACE - there is not enough space left in
			the queue to write the record.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(DCPTST) for
			usage examples.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="WRITEQTS">
		</a>WRITEQ</b> TS</td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The WRITEQ TS function writes a record to the specified temporary
			storage queue.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS WRITEQ TS QUEUE(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		FROM(data-area) LENGTH(data-area)</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
			[ITEM(data-value) [REWRITE]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [NUMITEMS(data-area)]</font><p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [MAIN |
			AUXILIARY] NOSUSPEND<br>
			END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			QUEUE(name) or QNAME(name) - Specifies the one to 16 character name of the temporary storage
			queue to be written.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			FROM(data-area) - </font><font face="Courier New">specifies the data
			area that contains the record to be written.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			LENGTH(data-area) - </font><font face="Courier New">specifies the
			S9(4) COMP data area that contains
			the number of characters to write from the FROM data area.</font><font face="courier new">
			If length is omitted the preprocessor will pass the actual length of
			the FROM data-area.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NUMITEMS(data-area) - specifies the </font><font face="Courier New">
			S9(4) COMP </font><font face="courier new">
			data area that, on return, will
			contain the total number of records in the specified queue
			(including the one just written).</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			ITEM(data-value) - specifies, on entry, the </font><font face="Courier New">
			S9(4) COMP </font><font face="courier new">
			data area that contains the item number of the queue record to
			be written (only if REWRITE specified). On return contains the item
			number written.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			REWRITE - specifies that the record should be rewritten.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			MAIN</font></p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			AUXILIARY - these arguments are accepted as comments only.</font></p>
			<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			NOSUSPEND - a <u>required</u> argument indicating immediate return
			(with RC) if space is not available to write the data.</font></p>
		</blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">ITEMERR - the item number exists and REWRITE
			was not given, or, the item number does not exist and REWRITE was
			given</font><font face="Courier New">.</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">QIDERR - the queue doesn't exist (for
			REWRITE only).</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">LENGERR - the length specified is greater
			than the maximum allowed for this queue.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="Courier New">NOSPACE - there is not enough space left in
			the queue to write the record.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0">
			<font face="Times New Roman">NOSUSPEND</font><font face="Courier New">
			is an optional argument in CICS, but is required in <i><b>KICKS</b></i>.</font></li>
		</ul>
		</td>
	</tr>
	<tr>
		<td width="131" valign="top"><b><a name="XCTL"></a>XCTL</b></td>
		<td>
		<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
		Purpose:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			The XCTL function terminates the running program and invokes the
			specified program. Data can be passed to the invoked program.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Syntax:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">EXEC
		KICKS XCTL PROGRAM(name) </font>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[COMMAREA(data-area)
			[LENGTH(data-value)]]<br>END-EXEC</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Arguments:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PROGRAM(name) - specifies the one to eight character name of the
			program to be invoked. The name must be defined in the PPT.</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">COMMAREA(data-area) - specifies a data area
			that is passed to the invoked program as a communication area. The
			invoked program access the data via its DFHCOMMAREA field, so it is
			the same storage in the invoking program and the invoked program,
			therefore, since the invoking program is going away, this storage
			better not be inside it!</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGTH(data-value) - the length of the data
			area specified in the COMMAREA argument. If length is omitted&nbsp;
			the preprocessor will pass the actual length of the COMMAREA
			data-area.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Exceptional Conditions:</font><blockquote>
			<p style="margin-top: 0; margin-bottom: 0"><font face="courier new">
			PGMIDERR - The program is not in the PPT</font><p style="margin-top: 0; margin-bottom: 0">&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">DISABLED - The PPT entry for the program is
			disabled (happens for example if the program is not present in the
			KIKRPL library concatenation).</font><p style="margin-top: 0; margin-bottom: 0">
			&nbsp;<p style="margin-top: 0; margin-bottom: 0">
			<font face="courier new">LENGERR - the LENGTH specified is to large.</font></blockquote>
		<p style="margin-top: 0; margin-bottom: 0">
		<font face="courier new">Notes:</font><ul>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			Control does not normally return to the invoking program. However,
			if the XCTL itself fails (a PGMIDERR condition for example) it will.</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">
			Since the invoking program will go away the COMMAREA it passes to
			the invoked program better not be in the invoking program's
			WORKING-STORAGE!!
			Usually it will be the COMMAREA that was originally passed <u>to</u>
			the invoking program...</font></li>
			<li>
			<p style="margin-top: 0; margin-bottom: 0"><font face="Courier New">See
			HERC01.KICKSSYS.V1R5M0.TESTCOB(LINKTST)
			for usage example.</font></li>
		</ul>
		</td>
	</tr>
</table>

<p style="margin-top: 0; margin-bottom: 0">&nbsp;</p>
<h3><a name="use"></a>Use of non-CICS API’s </h3>
<p>Although <i><b>KICKS</b></i> currently lacks support for some of the CICS
command level programming api, I expect it will ultimately support all the
important parts of it. That said, a big <i><b>KICKS</b></i> advantage over CICS
is freedom from the CICS api! <u>If you don’t care about compatibility</u>,
techniques that would crash a CICS system will work very well in <i><b>KICKS</b></i>!
Since <i><b>KICKS</b></i> is itself just a normal TSO application that calls
your application, your application can do just about anything you would normally
do in a normal TSO or batch application. </p>
<ul>
	<li>Use normal COBOL file access. Define files using the INPUT-OUTPUT
	SECTION and FILE-CONTROL in the ENVIRONMENT DIVISION; FILE-SECTION and FD’s
	in the DATA DIVISION; normal OPEN’s, CLOSE’s, READ’s, WRITE’s, etc in the
	PROCEDURE DIVISION – just like a batch program. Be sure to include ALLOC’s
	(and FREE’s) for these files in your KICKS clist…
	<p>This is a great way to implement some kind of file access <i><b>KICKS</b></i>
	does not support, especially ISAM, direct, and partitioned.</p>
	<p>But take some care: <i><b>KICKS</b></i> won’t be providing any kind of
	sharing support for this, you must implement any necessary sharing controls
	yourself! Some possibilities for ‘sharing safe’ allocations include temporary files, files with userid qualified file names, anything with DISP=OLD.
	</li>
	<li>
	<p style="margin-top: 12px">Use COBOL sort. Define using INPUT-OUTPUT
	SECTION and FILE-CONTROL in the ENVIRONMENT DIVISION; FILE-SECTION and SD’s
	in the DATA DIVISION; normal SORT’s and MERGE’s in the PROCEDURE DIVISION –
	just like a batch program. Be sure to include ALLOC’s (and FREE’s) for these
	sort work files in your KICKS clist… </p>
	<p>As with non-sort file access take some care: <i><b>KICKS</b></i> won’t be
	providing any kind of sharing support for this, you must implement any
	necessary sharing controls yourself. This may not be much of a problem as
	your sort work files would probably be allocated as temporary files. </li>
	<li>
	<p style="margin-top: 12px">Use COBOL report writer. Similar to use of
	normal COBOL files and sort work files as above. Note that closed SYSOUT’s
	are not usually available for JES processing until <i><b>KICKS</b></i> ends
	(when the ALLOC is FREE’d). </li>
	<li>
	<p style="margin-top: 12px">For GCCMVS apps compatibility is probably not an
	issue, but for the record your non-compatible GCCMVS based <i><b>KICKS</b></i> app can use
	most any PDPCLIB or other library api's it needs.</li>
</ul>
<h3><a name="debugging"></a>Debugging </h3>
<p>The debugging process starts when you realize your program is doing something
wrong and ends when you understand why. </p>
<p>Many times the whole process happens in your head when you first look at the
problem: you've recently made a change to a program, and you realize you didn't
consider the situation that you can now see lead to the problem. Debugging over,
time to fix the problem.</p>
<p>Unfortunately sometime it's not so easy. Maybe you <u>have</u> just made a
change (or two), but you just don't see how your change could possibly cause
this mess...</p>
<p>The process (science? art?) you use to discover the cause is way beyond the
scope of this documentation, but the process will certainly involve learning
more about exactly what is going on to cause the problem, and that will involve
using whatever debugging aids are available to help you.</p>
<p><i><b>KICKS</b></i> provides several debugging aids: <i><b>KICKS</b></i> abends,
user abends via EXEC KICKS ABEND in your program, formatted dumps, internal
trace table and auxiliary trace, and <i><b>KICKS</b></i>'s own 'execution debug facility' (aka KEDF). </p>
<p>When <i><b>KICKS</b></i> detects some kind of abnormal condition it usually
either generates a defined abend with a dump, or, if your application requested
it, returns to your application with appropriate codes set to allow your
application to handle the problem. In the event your application requested error
return but does not handle the problem it can generate its own abend that can
produce a dump (or it can abend without a dump if the cause of the abend is so
obvious no dump is needed). </p>
<p>Besides abends generated when <i><b>KICKS</b></i> detects some kind of
abnormal condition there are three more abends that are the result of MVS
detecting some situation. None of these abends are reflected to the user
application, all result in <i><b>KICKS</b></i> shutdown following a formatted
dump and a SYSUDUMP. </p>
<p>The first of these abends is AICA – aka runaway task –
which occurs when an application takes longer than the time specified in the
ICVR value of the SIT (default 5 seconds) between calls for <i><b>KICKS</b></i>
service. If your code is doing something that really takes a long time make sure
you at least do an EXEC KICKS SUSPEND END-EXEC every 3-4 seconds… </p>
<p>The second of
the three special abends is ASRA – aka program check – which occurs when an
application (or <i><b>KICKS</b></i> itself) gets a program check (0C1-bad
instruction, 0C4-storage violation, 0C7-bad data, etc, etc). </p>
<p>The last of the
three special abends is ASRB – aka OS abend – when some other kind of OS abend
(804/80A out of memory? 222 operator cancel?) is detected. </p>
<h4><a name="debugging-td"></a>Transaction Dumps </h4>
<p><a target="_blank" href="debug-listings/dfxx-trandump.htm">Here</a> is a
sample of the kind of transaction dump <i><b>KICKS</b></i> will produce for it's
abends, or you can request for your own abends. The <i><b>KICKS</b></i> clist
usually does not allocate the dump dataset (TRANDUMP), and when <i><b>KICKS</b></i>
sees this situation it dynamically allocates a SYSOUT dataset for the dump,
which is available immediately (you don't have to stop <i><b>KICKS</b></i> to
get it).</p>
<p>Starting at line
<a target="_blank" href="debug-listings/dfxx-trandump.htm#158">158</a> you see the Exec Interface Block (EIB) contents. You can see (from EIBTRNID)
that this is a dump for the DFXX transaction, task number 0006 (from EIBTASKN). You can also see (EIBAID) that the input was terminated with a PF6.
Knowing what you do about the DFXX transaction (see <a href="Examples.shtml">EXAMPLES</a>) all you need to do to reproduce this dump is type DFXX (enter), then type PF6. FYI, the source code for the
DFXX transaction in HERC01.KICKS.V1R5M0.COB(DFXXP00A).</p>
<p>A little further down (line
<a target="_blank" href="debug-listings/dfxx-trandump.htm#274">274</a>) you see the COMM-AREA and it’s length. Since a COMM-AREA exists
(length not equal zero) this is not the first pseudo-conversational call to the
program. </p>
<p>Next (lines <a target="_blank" href="debug-listings/dfxx-trandump.htm#315">
315-320</a>) are the decoded trace table entries for the abending task (task 
0006
- matching EIBTASKN). If you look just
above that in the trace table you will see the entries for task 0005, which was
the first pseudo-conversational call. </p>
<p>After that (lines
<a target="_blank" href="debug-listings/dfxx-trandump.htm#379">379-381</a>) are your
program registers for the <i><b>KICKS</b></i> call that resulted in the abend,
with register 14 being the return point in your program DFXXP00A. Just below
that (line <a target="_blank" href="debug-listings/dfxx-trandump.htm#383">383</a>) <i><b>KICKS</b></i>
has determined that the register 14 return address is at offset
<font face="Courier New">0D5C</font> in program
DFXXP00A. and it then lists program DFXXP00A (starting at program relative
address 000000). Further down the listing (line
<a target="_blank" href="debug-listings/dfxx-trandump.htm#597">597</a>) relative
offset 
<font face="Courier New">0D5C</font> is marked with an eyecatching <font face="Arial Black">&lt;&lt;&lt;&lt;</font>. Listing your compiled program is
not often useful, but the listing does contain your working storage, in this
case beginning with ‘ABEND TESTER’ (line
<a target="_blank" href="debug-listings/dfxx-trandump.htm#399">399</a>). </p>
<p>You know from the <a target="_blank" href="debug-listings/dfxx-trandump.htm">first line</a> of the dump that this was an AEIL abend (file
not found), and since there is only
one file operation in DFXXP00A it’s not really a mystery what happened, but it’s
easy to use the information in the dump to pinpoint exactly the line in the
program where it occurred. Use of offset into DFXXP00A (<font face="Courier New">0D5C</font>, as given at line
<a target="_blank" href="debug-listings/dfxx-trandump.htm#383">383</a>) and compare that
to the code offsets in the <a target="_blank" href="debug-listings/DFXXP00A.htm">compile listing</a> CLIST
at line <a target="_blank" href="debug-listings/DFXXP00A.htm#945">945</a>, which
shows the code was ‘between’ the start of line 334 and line
344 (ie, it
was the CALL). Note that 334 and 344 are COBOL compiler line numbers
corresponding to my compile listing line numbers
<a target="_blank" href="debug-listings/DFXXP00A.htm#744">744-754</a>. By either set of line
numbers, those are lines of code the preprocessor added for the<font face="Courier New"> EXEC KICKS
READ DATASET</font> api call.</p>
<h4><a name="debugging-tt"></a>Internal and External API trace</h4>
<p><i><b>KICKS</b></i> has internal (in memory) and external (written to disk,
or maybe sysout) traces. The internal trace (default 100 entries, settable by
the SIT/startup parameter TRCNUM) wraps around, so that it only show the last
100 (sic) entries. The external trace (called the auxiliary trace) is the same
format, but does not wrap so there is less risk of losing the necessary
information when the chain of events leading to the error is a long one. The
internal trace is (by default) always on, but the external trace is (by default)
off because there is a pretty high overhead to running it, and because it may
cause a crash if it fills up its disk allocation (or the JES2 spool). Since the
external trace is normally turned off, you need to use KSMT to turn it on. The
strategy is usually (1) use KSMT to turn it on; (2) do whatever you want traced; (3) turn it
off; (4) shutdown <i><b>KICKS</b></i> and print (or review online) the auxiliary
file. The 'REVIEW' utility (pre-installed on TK3UPD, SU1 and MVS380) is the best
way I've found to look at this file online.</p>
<p>It’s also possible to write a user trace entry into the table.
<font face="Courier New">EXEC KICKS ENTER FROM() END-EXEC</font> will do this. The resulting trace table entry
will be a PU xxxx (program control entry, user trace, xxxx being text specified
in ‘FROM’). The internal trace only saves the first 12 (at most) bytes of your
FROM message. Up to 256 bytes of your message will be saved in the external
trace (if it is turned on).</p>
<h4><a name="debugging-nca"></a>Use of non-CICS API’s (for debugging)</h4>
<p>Earlier we discussed use of non-CICS api’s. Another use for some of those is
debugging. You can sometimes use DISPLAY, EXHIBIT and READY TRACE to your
advantage. All of these normally display their output on dd SYSOUT, which the
KICKS clist directs to SYSOUT(A). DISPLAY can also be directed to SYSPUNCH (no
DD for this in KICKS clist, you’d have to add it) and CONSOLE. I find it very
convenient to DISPLAY UPON CONSOLE as I don’t have to wait for <i><b>KICKS</b></i>
to shutdown to see what I’m after – but you need to make sure you don’t go
overboard and flood the console (forcing an IPL). </p>
<p>You might be tempted to use ACCEPT (which actually works fine, except…) but I
recommend against it. ACCEPT FROM CONSOLE would be your most likely desire and
you should understand that it will block – which will trigger an AICA abend as
described above when the block exceeds the ICVR value. </p>
<h4><a name="debugging-k1"></a>KEDF (KICKS Execution Debug Facility)</h4>
<p>Debugging from a transaction dump, or using some of the other above discussed
techniques is often sufficient. But there's a bigger gun in your arsenal! The
Execution Debug Facility ( KEDF ) lets you peek inside your program, while it's
running, immediately before and after every (or selected) <i><b>KICKS</b></i>
api call! You can see the api call itself with all its arguments; the EIB; the
COMM-AREA, the program (with WORKING-STORAGE); the internal trace table;&nbsp;
and a variety of <i><b>KICKS</b></i> storage areas such as the TWA, the CWA, and
the TCTTEUA.</p>
<p>KEDF is enabled by use of the KEDF transaction, saying ON to turn it on.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">kedf on</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                                        
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">which doesn't seem to do much, just acknowledges your request</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal"></span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">    KEDF is on                                                                 
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">At this point you can type the transaction you want to debug
(clear screen first, or just type it where KEDF left the cursor)</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">dfxx</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">KEDF is on                                                                 
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">For this example we'll use the DFXX PF6 case we saw in the above
transaction dump, so enter DFXX and press enter</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0005 Program: DFXXP00A Offset X&#39;000B0E&#39;   KICKS 1.5.0  
 Status:</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> ABOUT TO EXECUTE COMMAND</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                              14:39:04 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 EXEC KICKS SEND TEXT                                             EIBFN=X&#39;1806&#39; 
   FREEKB ERASE                                                                 
    LENGTH(1106)                                                                
000000 000BD5C8: C1C2C5D5 C440E3C5 E2E3C5D9 40404040  ABEN D TE STER            
000010 000BD5D8: 40404040 40404040 40404040 40404040                            
000020 000BD5E8: 40404040 40404040 40404040 40404040                            
000030 000BD5F8: 40404040 40404040 40404040 40404040                            
000040 000BD608: 40404040 40404040 40404040 40404040                            
000050 000BD618: 40404040 40404040 40404040 40404040                            
000060 000BD628: 40404040 40404040 40404040 40404040                            
000070 000BD638: 40404040 40404040 40404040 40404040                            
000080 000BD648: 40404040 40404040 40404040 40404040                            
000090 000BD658: 40404040 40404040 40404040 4040D799                   Pr       
0000A0 000BD668: 85A2A240 8140D7C6 409285A8 40A39640  ess  a PF  key  to        
0000B0 000BD678: 86969983 85409695 85409686 40A38885  forc e on e of  the       
0000C0 000BD688: 40869693 9396A689 95874081 82859584   fol lowi ng a bend       
0000D0 000BD698: A27A4040 40404040 40404040 40404040  s:                        
0000E0 000BD6A8: 40404040 40404040 40404040 40404040                            
0000F0 000BD6B8: 40404040 40404040 40404040 40404040                            
000100 000BD6C8: 40404040 40404040 40404040 40404040                            
                </span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                               
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>


<p align="left">Well, this is new - it's the initial SEND TEXT from line
<a target="_blank" href="debug-listings/DFXXP00A.htm#667">667</a> in the program listing, caught
between DFXX saying to do it and <i><b>KICKS</b></i> starting to do it. Let's
take a long look at this screen as it's a model for many more we'll shortly see.</p>
<p align="left">The first thing at the top left of the screen is DFXX. Next is
the task number (EIBTASKN).. Then the name of the program that is
running - DFXXP00A, and the offset within that program to the displayed api
call. If we weren't sure this is from the first SEND TEXT in the program we
could use this offset, and the compile listing CLIST to verify that it is indeed
from line 667.</p>
<p align="left">On the 2nd line left, STATUS tells us this is a picture BEFORE
the api call is executed. On the 2nd line right the date and time are for this
screen display (<u>not</u> EIB date and time). </p>
<p align="left">The 3rd line starts the api listing, telling us this is a SEND
TEXT, with the FREEKB and ERASE options, that the text being sent is 948
characters long, and then showing us the text itself (in dump hex/ebcdic
format).</p>
<p align="left">The bottom line provides some clues about our choices. If we
press ENTER the command will be executed and we will see the results</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0005 Program: DFXXP00A Offset X&#39;000B0E&#39;   KICKS 1.5.0  
 Status:</span><span style="color:white;background:black;font-weight:normal;font-style:normal"> COMMAND EXECUTION COMPLETE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                            14:39:19 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 EXEC KICKS SEND TEXT                                             EIBFN=X&#39;1806&#39; 
   FREEKB ERASE                                                                 
    LENGTH(1106)                                                                
000000 000BD5C8: C1C2C5D5 C440E3C5 E2E3C5D9 40404040  ABEN D TE STER            
000010 000BD5D8: 40404040 40404040 40404040 40404040                            
000020 000BD5E8: 40404040 40404040 40404040 40404040                            
000030 000BD5F8: 40404040 40404040 40404040 40404040                            
000040 000BD608: 40404040 40404040 40404040 40404040                            
000050 000BD618: 40404040 40404040 40404040 40404040                            
000060 000BD628: 40404040 40404040 40404040 40404040                            
000070 000BD638: 40404040 40404040 40404040 40404040                            
000080 000BD648: 40404040 40404040 40404040 40404040                            
000090 000BD658: 40404040 40404040 40404040 4040D799                   Pr       
0000A0 000BD668: 85A2A240 8140D7C6 409285A8 40A39640  ess  a PF  key  to        
0000B0 000BD678: 86969983 85409695 85409686 40A38885  forc e on e of  the       
0000C0 000BD688: 40869693 9396A689 95874081 82859584   fol lowi ng a bend       
0000D0 000BD698: A27A4040 40404040 40404040 40404040  s:                        
0000E0 000BD6A8: 40404040 40404040 40404040 40404040                            
0000F0 000BD6B8: 40404040 40404040 40404040 40404040                            
000100 000BD6C8: 40404040 40404040 40404040 40404040                            
 Last Response: </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>


<p align="left">Here are the results. STATUS on the 2nd line tells us this is
AFTER the api call is executed. Notice the time at the right of the 2nd line is
updated as well. </p>
<p align="left">On the prior screen the line one up from the bottom was blank.
Now that line shows the KICKS feedback from the api call. On the left is the
text response (would match what you code in a DFHRESP(NORMAL) statement); on the
right is EIBRESP and EIBRESP2, both zero in this case as you would expect for a
NORMAL return..</p>
<p align="left">Lets see what some of those other keys across the bottom do. PF1
is HELP - seems promising</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0005 Program: DFXXP00A Offset X&#39;000B0E&#39;   KICKS 1.5.0  
 Status:</span><span style="color:white;background:black;font-weight:normal;font-style:normal"> COMMAND EXECUTION COMPLETE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                            14:39:19 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 EXEC KICKS SEND TEXT                                             EIBFN=X&#39;1806&#39; 
   FREEKB ERASE                                                                 
    LENGTH(1106)                                                                
000000 000BD5C8: C1C2C5D5 C440E3C5 E2E3C5D9 40404040  ABEN D TE STER            
000010 000BD5D8: 40404040 40404040 40404040 40404040                            
000020 000BD5E8: 40404040 40404040 40404040 40404040                            
000030 000BD5F8: 40404040 40404040 40404040 40404040                            
000040 000BD608: 40404040 40404040 40404040 40404040                            
000050 000BD618: 40404040 40404040 40404040 40404040                            
000060 000BD628: 40404040 40404040 40404040 40404040                            
000070 000BD638: 40404040 40404040 40404040 40404040                            
000080 000BD648: 40404040 40404040 40404040 40404040                            
000090 000BD658: 40404040 40404040 40404040 4040D799                   Pr       
0000A0 000BD668: 85A2A240 8140D7C6 409285A8 40A39640  ess  a PF  key  to        
 Last Response: </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                     ENTER - step     CLEAR - Show user screen  
 PF1  - help      PF2   - src&lt;-&gt;api  PF3   - goto bkpt PF4  - skip subroutine   
 PF5  - tog bkpt  PF6   - ....       PF7   - back      PF8  - forward           
 PF9  - trace tbl PF10  - eib        PF11  - commarea  PF12 - working storage   
 13/1 - tog ST    14/2  - cwa        15/3  - quit      16/4 -                   
 17/5 - dump      18/6  - abend      19/7  - top       20/8 - bottom            
 21/9 - twa       22/10 - tctteua    23/11 - tioa      24/12- re center</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">         
</span></pre></td></tr>
  </table>


<p align="left">What happened was a couple extra lines of help pushed up from
the bottom telling us about more PF keys. If you push PF1 again a couple more 
lines of this will pop up. Push PF1 a third time will return to the single help 
line of the bottom of the screen.&nbsp; For now lets press enter to see what
comes next.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0005 Program: DFXXP00A Offset X&#39;000EC8&#39;   KICKS 1.5.0  
 Status:</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> ABOUT TO EXECUTE COMMAND</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                              14:40:23 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 EXEC KICKS RETURN TRANSID(DFXX)                                  EIBFN=X&#39;0E08&#39; 
                                                                                
  COMM-AREA(000BDA30)     COMM-AREA LENGTH(1)                                   
                                                                                
000000 000BDA30: 00                                   .                         
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                </span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                               
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                     ENTER - step     CLEAR - Show user screen  
 PF1  - help      PF2   - src&lt;-&gt;api  PF3   - goto bkpt PF4  - skip subroutine   
 PF5  - tog bkpt  PF6   - ....       PF7   - back      PF8  - forward           
 PF9  - trace tbl PF10  - eib        PF11  - commarea  PF12 - working storage</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">   
</span></pre></td></tr>
  </table>


<p align="left">If we peeked at the program listing we certainly hoped this
would be next! We wrote the screen, so now it's time to become
pseudo-conversational by doing a RETURN TRANSID. Let's press ENTER again to see
what happens AFTER</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ABEND TESTER                                                                    
                                                                                
Press a PF key to force one of the following abends:                            
                                                                                
PF1 = ASRA (Data Exception)                                                     
PF2 = ASRA (Decimal Divide Exception)                                           
PF3 = ASRA (Protection Exception)                                               
PF4 = ABM0 (Missing Map)                                                        
PF5 = AEIO (PGMIDERR)                                                           
PF6 = AEIL (DSIDERR)                                                            
PF7 = AICA  (Run away task)                                                     
                                                                                
                                                                                
Or press Enter to exit without abending.                                        
</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                                               
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">So the program screen is restored and the program is waiting for
us to do something. Before moving on this is a good time to say that KEDF almost
always is able to properly save and restore user screens, but unfortunately not
absolutely 100% of the time. It actually does a much better job of this than
does CICS's similar 'CEDF' facility, but it lacks CEDF's ability to debug using
a second terminal (which probably really is a 100% solution). Using a second
terminal doesn't seem practical in a TSO environment, so my commitment is to fix
<u>all</u> problems with KEDF screen restore, but I can only do so if you bring
problems to my attention!&nbsp; Please do!!</p>
<p align="left">Pick PF6 (the AEIL abend) to follow what was going on in the transaction dump</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0006 Program: DFXXP00A Offset X&#39;000D5C&#39;   KICKS 1.5.0  
 Status:</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> ABOUT TO EXECUTE COMMAND</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                              14:40:49 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 EXEC KICKS READ FILE(NOFILE  )                                   EIBFN=X&#39;0602&#39; 
  INTO(X&#39;0BD560&#39;)  LENGTH(-1)                                                   
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                </span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                               
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                     ENTER - step     CLEAR - Show user screen  
 PF1  - help      PF2   - src&lt;-&gt;api  PF3   - goto bkpt PF4  - skip subroutine   
 PF5  - tog bkpt  PF6   - ....       PF7   - back      PF8  - forward           
 PF9  - trace tbl PF10  - eib        PF11  - commarea  PF12 - working storage</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">   
</span></pre></td></tr>
  </table>


<p align="left">So the next thing that happens is the READ FILE api call. Notice
it shows where the RIDFLD is located and its length, then the RIDFLD itself in
hex and ebcdic, then it shows the INTO location and how big that area is. Notice
the size is shown as -1, meaning the program did not supply a length, telling
KICKS to use the file's record size. Also notice the task number is no
longer 0005, it's incremented to 0006. Press ENTER again and we get</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0006 Program: DFXXP00A Offset X&#39;000D5C&#39;   KICKS 1.5.0  
 Status:</span><span style="color:white;background:black;font-weight:normal;font-style:normal"> COMMAND EXECUTION COMPLETE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                            14:41:25 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 EXEC KICKS READ FILE(NOFILE  )                                   EIBFN=X&#39;0602&#39; 
  INTO(X&#39;0BD560&#39;)  LENGTH(-1)                                                   
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
 Last Response: </span><span style="color:black;background:red;font-weight:normal;font-style:normal">F</span><span style="color:red;background:black;font-weight:normal;font-style:normal">ILENOTFOUND (DSIDERR)</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                  </span><span style="color:red;background:black;font-weight:normal;font-style:normal">EIBRESP=12, EIBRESP2=1</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                     ENTER - step     CLEAR - Show user screen  
 PF1  - help      PF2   - src&lt;-&gt;api  PF3   - goto bkpt PF4  - skip subroutine   
 PF5  - tog bkpt  PF6   - ....       PF7   - back      PF8  - forward           
 PF9  - trace tbl PF10  - eib        PF11  - commarea  PF12 - working storage</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">   
</span></pre></td></tr>
  </table>


<p align="left"><i><b>KICKS</b></i> comes back and says there has been a
problem! It show error responses in <font color="#FF0000" size="4"><b>RED</b></font>
to make them harder to miss. Usually the response will be one word, but
FILENOTFOUND is so often called DSIDERR that <i><b>KICKS</b></i> recognizes (and
displays) both. On the right you see EIBRESP=12 (filenotfound/dsiderr) and
EIBRESP=1. You could look these up if you want but I'm sure you already know
that &quot;NOFILE&quot; isn't in the FCT. BTW - notice that the
<font face="Courier New">0CE6</font> offset is the same as
it was in the transaction dump.</p>
<p align="left">Before pressing ENTER to see what happens next let's peek at the
EIB and the internal trace table. Press PF10 to see the EIB</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0006 Program: DFXXP00A Offset X&#39;000D5C&#39;   KICKS 1.5.0  
 Status:</span><span style="color:white;background:black;font-weight:normal;font-style:normal"> COMMAND EXECUTION COMPLETE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                            14:41:25 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
                                                                                
0D486C: EIBCALEN  1                                                             
0D486E: EIBCPOSN  0460 (15,1)                                                   
0D4870: EIBDATE   0114304F (14.304)                                             
0D4874: EIBTIME   0144049F (14:40:49)                                           
0D4878: EIBRESP   12                                                            
0D487C: EIBRESP2  1                                                             
0D4880: EIBRSRCE  NOFILE                                                        
0D4888: EIBDS     NOFILE                                                        
0D4890: EIBFN     0602                                                          
0D4892: EIBRCODE  00 00 00 00 00 00                                             
0D4898: EIBTRMID  U0C0                                                          
0D48A0: EIBAID    F6                                                            
0D48A1: EIBOPID   999                                                           
0D48A4: EIBUSRID  HERC01                                                        
0D48AC: EIBSYSID  BSP1                 0D48C8: EIBPROG   DFXXP00A               
0D48B4: EIBNETID  CUU0C0               0D48C4: EIBLINE    83886195              
0D48BC: EIBPGMID</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> DFXXP00A             0D48D0: EIBWC     14:53:09OCT 30, 2014   
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                     ENTER - step     CLEAR - Show user screen  
 PF1  - help      PF2   - src&lt;-&gt;api  PF3   - goto bkpt PF4  - skip subroutine   
 PF5  - tog bkpt  PF6   - ....       PF7   - back      PF8  - forward           
 PF9  - trace tbl PF10  - eib        PF11  - commarea  PF12 - working storage</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">   
</span></pre></td></tr>
  </table>


<p align="left">Notice the difference between EIBTIME and the time in the upper
right corner. This transaction has been &quot;frozen&quot; for almost a minute, meaning
any resources it's holding are unavailable to other users. That's why you should
be a little careful using KEDF if the transaction you are debugging uses
resources (ie, files) someone else might be trying to use. They won't be happy
about the transaction delays and timeouts you are causing them! Probably the
best way to avoid this issue is to use 'test' files for your debugging...</p>
<p align="left">You can also see that it really was
a PF6 that got us here (EIBAID = F6). </p>
<p align="left">On the subject of PF keys (and KEDF
navigation), recall it was a PF10 that got us to this screen. If you press PF10
again on this screen you return to the api screen. Again and you come back to
this screen.. From either of those screens press PF9 to get to the trace screen.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 0006 Program: DFXXP00A Offset X&#39;000D5C&#39;   KICKS 1.5.0  
 Status:</span><span style="color:white;background:black;font-weight:normal;font-style:normal"> COMMAND EXECUTION COMPLETE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                            14:41:25 14.304</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
                                                                                
Trace Table storage address 0BB950, length 1600                                 
                                                                                
0001C0 000BBB10:  Program Control, exit               PX000       0005          
0001D0 000BBB20:  BMS, send text                      B04         0005          
0001E0 000BBB30:  Terminal Control, send              T02         0005          
0001F0 000BBB40:  Terminal Control, exit              TX000       0005          
000200 000BBB50:  BMS, exit                           BX000       0005          
000210 000BBB60:  Program Control, return             P05    DFXX 0005          
000220 000BBB70:  Task Control, exit                  KX001       0000          
000230 000BBB80:  Terminal Control, receive           T03         0000          
000240 000BBB90:  Terminal Control, exit              TX024       0000          
000250 000BBBA0:  Task Control, attach                K02DFXX     0006          
000260 000BBBB0:  Program Control, load               P02DFXXP00A 0006          
000270 000BBBC0:  Program Control, exit               PX000       0006          
000280 000BBBD0:  File Control, read                  F06NOFILE   0006          
000290 000BBBE0:  Program Control, abend (might be tr P07    AEIL 0006 &lt;&lt;&lt;&lt;     
                </span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                               
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                     ENTER - step     CLEAR - Show user screen  
 PF1  - help      PF2   - src&lt;-&gt;api  PF3   - goto bkpt PF4  - skip subroutine   
 PF5  - tog bkpt  PF6   - ....       PF7   - back      PF8  - forward           
 PF9  - trace tbl PF10  - eib        PF11  - commarea  PF12 - working storage</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">   
</span></pre></td></tr>
  </table>


<p align="left">This is the trace table, scrolled automatically to include the
final entry for this transaction ( 0023 ). Note the AEIL abend,
and the <font face="Arial Black">&lt;&lt;&lt;&lt;</font>. marker to show you the
last entry in the table.</p>
<p align="left">Now let's see what DFXX is going
to do with the problem.. Press Enter</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ABEND TESTER                                                                    
                                                                                
Press a PF key to force one of the following abends:                            
                                                                                
PF1 = ASRA (Data Exception)                                                     
PF2 = ASRA (Decimal Divide Exception)                                           
PF3 = ASRA (Protection Exception)                                               
PF4 = ABM0 (Missing Map)                                                        
PF5 = AEIO (PGMIDERR)                                                           
PF6 = AEIL (DSIDERR)                                                            
PF7 = AICA  (Run away task)                                                     
                                                                                
                                                                                
Or press Enter to exit without abending.                                        
</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">Transaction Abend Code AEIL                                                    
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">Not a surprise, it didn't handle it at all! At this point the
transaction dump we looked at earlier has been written. And although the
transaction has finished, freeing any resources someone else was waiting for, KEDF is actually
still active, waiting for us to do something else. We should press CLEAR, then type KEDF OFF to turn it off.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal"></span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">    KEDF is off                                                                
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">That's a quick intro to KEDF. Now lets look a little deeper.</p>
<h4 align="left"><a name="debugging-k2"></a>KEDF filtering</h4>
<p align="left">Most real world debugging exercises aren't quite as easily
resolved as this DFXX example. And if the transaction dump sometimes doesn't
provide enough information, KEDF can easily bury you under too much. One problem
is that it &quot;trains&quot; you to press ENTER to move on to the next screen, often
before you've spent the time to realize the answer you are looking for is
staring back at you from the screen you're about to leave behind.</p>
<p align="left">For me, part of the solution to the overabundance is to filter
what I have to look at. Of course filtering has its own risks, and I can't offer
much in the way of advice on how to decide what to filter, but the way I often
use filtering is to help me confirm or refute a hypothesis. For example I might
say &quot;This could be a data problem - let's see what records the transaction is reading and what they look like&quot;.
If I'm interested in the files, I don't care (at least for the&nbsp; moment)
about programs or maps being loaded, screens being updated, returns or any of
that stuff - and not having to look at it will help me focus on the few file api
calls I really need to see.</p>
<p align="left">KEDF implements filtering by allowing you to specify which api
calls to break on when you start KEDF.&nbsp; In the last example we used &quot;KEDF
ON&quot; to turn it on, &quot;KEDF OFF&quot; to turn it off.&nbsp; But if you don't say ON or
OFF, but just &quot;KEDF&quot;, you get a screen to fine tune your KEDF session.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> KEDF (1.5.0) is  OFF  to toggle it ON   press PF4            14:43:31  10/31/14
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> Highlighed</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> items will be displayed, to change put cursor on item,  press PF5   
                                                                                
                                                                                
                                                                                
   </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> DELETEQ TD      DELETE         ADDRESS       ABEND         RECEIVE          
    READQ TD        ENDBR          ASKTIME       DUMP          RECEIVE MAP      
    WRITEQ TD       READ           ASSIGN        ENTER         SEND TEXT        
                    READNEXT       ENQ           LINK          SEND MAP         
    SPOOLOPEN       READPREV       DELAY         LOAD          SEND CONTROL     
    SPOOLWRITE      RESETBR        DEQ           RELEASE                        
    SPOOLCLOSE      REWRITE        FORMATTIME    RETURN       </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> HANDLE CONDITION 
                   </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> STARTBR        SIGNOFF       XCTL          IGNORE CONDITION 
    DELETEQ TS      UNLOCK         SUSPEND                    </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> HANDLE AID       
   </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> READQ TS        WRITE          SYNCPOINT     FREEMAIN      HANDLE ABEND     
    WRITEQ TS       WRITE OPERATOR               GETMAIN                        
                                                                                
                   </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> SOURCE TRACE                               </span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                
                                                                                
                                                                                
 To highlight all press PF6, to Un-high all press PF7                           
                                                                                
 Enter (or PF3) - exit+save                                  Clear - exit+nosave
</span></pre></td></tr>
  </table>


<p align="left">From this KEDF screen you can turn it ON or OFF by pressing PF4.
And any of the api's can be toggled on or off by placing the cursor under it and
pressing PF5. They can <u>all</u> be turned on by pressing PF6, and <u>all</u> turned off by
pressing PF7. Pressing ENTER or PF3 saves the on screen changes and exits, while
CLEAR abandons all changes and quits.</p>
<p align="left">So to follow up on my earlier plan to focus on the file control
api's, I'd press PF7 to turn them all off, then move the cursor to DELETE and
press PF5, then down arrow, then PF5, down, PF5, down, PF5, down, ... until the
screen looked like this</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> KEDF (1.5.0) is  OFF  to toggle it ON   press PF4            </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">14:44:03</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">  10/31/14
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> Highlighed</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> items will be displayed, to change put cursor on item,  press PF5   
                                                                                
                                                                                
                                                                                
    DELETEQ TD     </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> DELETE        </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> ADDRESS       ABEND         RECEIVE          
    READQ TD       </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> ENDBR         </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> ASKTIME       DUMP          RECEIVE MAP      
    WRITEQ TD      </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> READ          </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> ASSIGN        ENTER         SEND TEXT        
                   </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> READNEXT      </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> ENQ           LINK          SEND MAP         
    SPOOLOPEN      </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> READPREV      </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> DELAY         LOAD          SEND CONTROL     
    SPOOLWRITE     </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> RESETBR       </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> DEQ           RELEASE                        
    SPOOLCLOSE     </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> REWRITE       </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> FORMATTIME    RETURN        HANDLE CONDITION 
                   </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> STARTBR       </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> SIGNOFF       XCTL          IGNORE CONDITION 
    DELETEQ TS     </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> UNLOCK        </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> SUSPEND                     HANDLE AID       
    READQ TS       </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> WRITE         </span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> SYNCPOINT     FREEMAIN      HANDLE ABEND     
    WRITEQ TS       </span><span style="color:black;background:red;font-weight:normal;font-style:normal">W</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">RITE OPERATOR               GETMAIN                        
                                                                                
                    SOURCE TRACE                                                
                                                                                
                                                                                
 To highlight all press PF6, to Un-high all press PF7                           
                                                                                
 Enter (or PF3) - exit+save                                  Clear - exit+nosave
</span></pre></td></tr>
  </table>


<p align="left">Then press PF4 to turn KEDF on, and ENTER to save all changes
and exit.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal"></span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">    KEDF is on                                                                 
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">The filtering changes remain in place until you change them, or
until <i><b>KICKS</b></i> is shutdown. On restart the default filters are back.
But the default filters can themselves be changed if desired.
<font face="Courier New">HERC01.KICKSSYS.V1R5M0.INSTLIB(KEDFILTR)</font> is a job to
reassemble the default filter table. Contained within are instructions for setting the default
state (on or off) of each of the api filters.</p>
<h4 align="left"><a name="debugging-k4"></a>Source code trace in KEDF</h4>
<p>You probably observed references to 'source trace', 'goto bkpt', 'skip 
subroutine', and similar options on the preceding screens. These refer to 
controls for an additional level of KEDF tracing. KEDF normally traces <i><b>
KICKS</b></i> api calls, possibly filtered. When source trace is enabled (and 
your program has been compiled for it) KEDF traces <u>all</u> your program's 
statements. Let's take a quick look at the DFXX transaction again, this time 
with source trace.</p>
<p>The first step to using source trace is to compile the program with a 
proc/exec that put the source into an online dataset so that KEDF can display it 
at run time. Generally speaking the normal compile proc/exec ends with an 'L' 
(K2KCOBCL, KIKCB2CL, KIKGCCCL, etc). The compile proc/exec for use with source 
trace ends with an 'S' (K2KCOBCS, KIKCB2CS, KIKGCCCS, etc). </p>
<p>The COBOL procs/exec uses the name of the program as specified in the 
&quot;PROGRAM-ID.&quot; statement to save the online source. GCC programs have no such 
internal identification, so the GCC procs/exec require you to add a &lt;SN xxxxxxxx&gt; 
statement to the source, where xxxxxxxx is the name you want used to identify 
the online source.</p>
<p>JCL to compile DFXX for source trace, using the K2KCOBCS proc, is in 
HERC01.KICKS.V1R5M0.COB($DFXX).</p>
<p>KEDF is enabled by use of the KEDF transaction, saying ON/S to turn it on 
with trace</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">kedf on/s</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                                      
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">which doesn't seem to do much, just acknowledges your request</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal"></span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">    KEDF is on                                                                 
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">At this point you can type the transaction you want to debug
(clear screen first, or just type it where KEDF left the cursor)</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">dfxx</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">KEDF is on                                                                 
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">For this example we'll use the DFXX PF6 case we saw in the above
transaction dump, so enter DFXX and press enter</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000B Program: DFXXP00A Offset X'000B12'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:07:55 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 67                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">         01  MORE-ARGS.                                                         
             05  FILLER              PIC S9(8) COMP.                            
             05  CWA-BLL             PIC S9(8) COMP.                            
                                                                                
         01  COMMON-WORK-AREA.                                                  
                                                                                
             05  CWA-DATE            PIC 9(06).                                 
                                                                                
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">         PROCEDURE DIVISION.                                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



<p align="left">The last time we did this, the first thing we saw was the 
'before' screen for the SEND TEXT. This time we start with the PROCEDURE 
DIVISION of the program! Let's
take a long look at this screen as it's a model for many more we'll shortly see. 
The first thing to note is that the source is displayed in several colors. Blue 
indicates the line will not trace and will not support a breakpoint, which makes 
sense for all the blue items here as they are either data division or comments. 
White indicates the line is the current line. Green indicates the line will 
trace and will accept a breakpoint. </p>
	<p align="left">Pressing ENTER on this screen will advance to the next 
	source line.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000B Program: DFXXP00A Offset X'000B36'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:02 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 69                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">             05  CWA-BLL             PIC S9(8) COMP.                            
                                                                                
         01  COMMON-WORK-AREA.                                                  
                                                                                
             05  CWA-DATE            PIC 9(06).                                 
                                                                                
         PROCEDURE DIVISION.                                                    
                                                                                
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Nothing special here. Press ENTER to advance to the next source line.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000B Program: DFXXP00A Offset X'000B5A'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:03 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 73                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">             05  CWA-DATE            PIC 9(06).                                 
                                                                                
         PROCEDURE DIVISION.                                                    
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF1                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF1                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Notice we have skipped the blue lines and are at the IF. Since we know this 
	is the initial invocation of DFXX, we expect that EIBCALEN will be zero. 
	Press ENTER to see confirmation in that the EXEC KICKS will be next.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000B Program: DFXXP00A Offset X'000BCE'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> ABOUT TO EXECUTE COMMAND</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                          20:08:05 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 74                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">                                                                                
         PROCEDURE DIVISION.                                                    
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF1                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF1                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE SPACE TO ALPHA-FIELD-2                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Here we are at the ABOUT TO EXECUTE COMMAND for the SEND TEXT we saw 
	earlier, but this time the SEND TEXT is shown in-line with the souce. PRESS 
	ENTER to see what happens next.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000B Program: DFXXP00A Offset X'0011DC'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> ABOUT TO EXECUTE COMMAND</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                          20:08:06 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 136                     
                                                                                
                         SEND TEXT FROM(TERMINATION-MESSAGE)             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         RETURN                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC.                                           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *    END-EVALUATE.                                                      
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">             EXEC KICKS                                                  </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 RETURN TRANSID('DFXX')                                  </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                        COMMAREA(COMMUNICATION-AREA)                     </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">             END-EXEC.                                                   </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *                                                                       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">         LOOP-FOREVER.                                                   </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">             GO TO LOOP-FOREVER.                                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *                                                                       
                                                                                
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Two things to note: previously when we looked at an api call we saw both a 
	before (aka ABOUT TO EXECUTE) and an after (aka COMMAND COMPLETE). This time 
	there was no 'after'. The source trace suppresses the 'after' when the 
	result is normal (that is, when EIBRESP=0). The next thing to notice is that 
	quite a few source statements have been bypassed (this being, as line 3 of 
	the screen shows, line 136 of the source, the previous screen showing line 
	74 or the source). If you were to use the PF7 key to page back on this 
	screen you would see that's due to the preceding lines being part of a large 
	nested IF. Press ENTER to see what happens next.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ABEND TESTER                                                                    
                                                                                
Press a PF key to force one of the following abends:                            
                                                                                
PF1 = ASRA (Data Exception)                                                     
PF2 = ASRA (Decimal Divide Exception)                                           
PF3 = ASRA (Protection Exception)                                               
PF4 = ABM0 (Missing Map)                                                        
PF5 = AEIO (PGMIDERR)                                                           
PF6 = AEIL (DSIDERR)                                                            
PF7 = AICA  (Run away task)                                                     
                                                                                
                                                                                
Or press Enter to exit without abending.                                        
</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                                                               
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>



  <p>Since the last KEDF screen was for a RETURN TRANSID it should be no 
	surprise to see the DFXX menu next. At this point please press PF6 to follow 
	the path of the earlier discussion.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000B12'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:15 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 67                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">         01  MORE-ARGS.                                                         
             05  FILLER              PIC S9(8) COMP.                            
             05  CWA-BLL             PIC S9(8) COMP.                            
                                                                                
         01  COMMON-WORK-AREA.                                                  
                                                                                
             05  CWA-DATE            PIC 9(06).                                 
                                                                                
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">         PROCEDURE DIVISION.                                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Back to the PROCEDURE DIVISION entry for the new task 000C. Press ENTER to 
	see what happens next.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000B36'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:18 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 69                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">             05  CWA-BLL             PIC S9(8) COMP.                            
                                                                                
         01  COMMON-WORK-AREA.                                                  
                                                                                
             05  CWA-DATE            PIC 9(06).                                 
                                                                                
         PROCEDURE DIVISION.                                                    
                                                                                
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Nothing special here. Press ENTER to advance to the next source line.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000B5A'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:20 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 73                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">             05  CWA-DATE            PIC 9(06).                                 
                                                                                
         PROCEDURE DIVISION.                                                    
                                                                                
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">         0000-FORCE-USER-ABEND.                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
        *    EVALUATE TRUE                                                      
        *        WHEN EIBCALEN = ZERO                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF1                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF1                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Nothing special here either. Since this is NOT the first entry we do not 
	expect EIBCALEN to be zero. Press ENTER to advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000BF8'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:21 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 81                      
                                                                                
                 IF EIBCALEN = ZERO                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND TEXT FROM(START-UP-MESSAGE)                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   ERASE                                 </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                                   FREEKB                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF1                                           
                 ELSE                                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF1                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE SPACE TO ALPHA-FIELD-2                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 100   TO PACKED-FIELD-1                        </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MULTIPLY PACKED-FIELD-1 BY PACKED-FIELD-2           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF2                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF2                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 100  TO PACKED-FIELD-1                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE ZERO TO PACKED-FIELD-2                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>As expected the SEND TEXT didn't happen, and the program is in the middle 
	of the string of nested IF's checking to see if a PF key was pressed. Notice 
	that the ELSE is in blue, meaning it will not trace and will not support a 
	breakpoint. When the statements that the preprocessor needs to add to cause 
	a line to trace cannot be added without changing the program logic the 
	preprocessor does not add them, so they show up in blue. ELSE is a very 
	common example, but not the only one.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000CC8'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:23 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 87                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">        *        WHEN EIBAID = KIKPF1                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF1                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE SPACE TO ALPHA-FIELD-2                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 100   TO PACKED-FIELD-1                        </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MULTIPLY PACKED-FIELD-1 BY PACKED-FIELD-2           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF2                                           
                 ELSE                                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF2                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 100  TO PACKED-FIELD-1                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE ZERO TO PACKED-FIELD-2                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     DIVIDE PACKED-FIELD-2 INTO PACKED-FIELD-1           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF3                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF3                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *            SET ADDRESS OF COMMON-WORK-AREA TO NULL                    
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 0 TO CWA-BLL                                   </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Of course we know we pressed PF6, so it's no suprise the next few screens 
	will display checks for PF keys we did not press. So just press ENTER again 
	to advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000D9A'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:25 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 93                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">        *        WHEN EIBAID = KIKPF2                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF2                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 100  TO PACKED-FIELD-1                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE ZERO TO PACKED-FIELD-2                         </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     DIVIDE PACKED-FIELD-2 INTO PACKED-FIELD-1           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF3                                           
                 ELSE                                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF3                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *            SET ADDRESS OF COMMON-WORK-AREA TO NULL                    
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 0 TO CWA-BLL                                   </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE ZERO TO CWA-DATE                               </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF4                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF4                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND MAP('NOMAP1')                              </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Just press ENTER again to advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000E2C'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:26 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 99                      
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">        *        WHEN EIBAID = KIKPF3                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF3                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *            SET ADDRESS OF COMMON-WORK-AREA TO NULL                    
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE 0 TO CWA-BLL                                   </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     MOVE ZERO TO CWA-DATE                               </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF4                                           
                 ELSE                                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF4                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND MAP('NOMAP1')                              </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              MAPSET('NOSET1')                           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              FROM(I-O-AREA)                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              ERASE                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF5                                           
                 ELSE                                                           
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Just press ENTER again to advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000EE2'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:28 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 108                     
                                                                                
                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         SEND MAP('NOMAP1')                              </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              MAPSET('NOSET1')                           </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              FROM(I-O-AREA)                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              ERASE                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF5                                           
                 ELSE                                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF5                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         XCTL PROGRAM('NOPGM1')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF6                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF6                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         READ DATASET('NOFILE')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Just press ENTER again to advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'000F78'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> SOURCE CODE TRACE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                                 20:08:29 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 114                     
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">        *        WHEN EIBAID = KIKPF5                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF5                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         XCTL PROGRAM('NOPGM1')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF6                                           
                 ELSE                                                           
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF6                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         READ DATASET('NOFILE')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              INTO(I-O-AREA)                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                              RIDFLD(ALPHA-FIELD-2)                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF7                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF7                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>Finally we get to the IF statement matching what we typed. Press ENTER to 
	advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'001008'   KICKS 1.5.0  
 Status (S):</span><span style="color:yellow;background:black;font-weight:normal;font-style:normal"> ABOUT TO EXECUTE COMMAND</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                          20:08:31 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 115                     
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF5                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         XCTL PROGRAM('NOPGM1')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF6                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF6                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                         READ DATASET('NOFILE')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                              INTO(I-O-AREA)                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                              RIDFLD(ALPHA-FIELD-2)                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF7                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF7                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     PERFORM LOOP-FOREVER                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">N</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ORMAL                                   EIBRESP=0, EIBRESP2=0  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>And sure enough the program's about to execute the bad read. Press ENTER to 
	advance.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> Transaction: DFXX Task: 000C Program: DFXXP00A Offset X'001008'   KICKS 1.5.0  
 Status (S):</span><span style="color:white;background:black;font-weight:normal;font-style:normal"> COMMAND EXECUTION COMPLETE</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal">                        20:08:32 14.306</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> 
 COB program compiled 19:35:11NOV 02, 2014, now at line 115                     
                                                                                
</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF5                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                         XCTL PROGRAM('NOPGM1')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF6                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF6                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                     EXEC KICKS                                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                         READ DATASET('NOFILE')                          </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                              INTO(I-O-AREA)                             </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                              RIDFLD(ALPHA-FIELD-2)                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:white;background:black;font-weight:normal;font-style:normal">                     END-EXEC                                            </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
        *        WHEN EIBAID = KIKPF7                                           
                 ELSE                                                           
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                 IF EIBAID = KIKPF7                                      </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                     PERFORM LOOP-FOREVER                                </span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">       
                                                                                
 Last Response:</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal"> </span><span style="color:black;background:red;font-weight:normal;font-style:normal">F</span><span style="color:red;background:black;font-weight:normal;font-style:normal">ILENOTFOUND (DSIDERR)</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">                  </span><span style="color:red;background:black;font-weight:normal;font-style:normal">EIBRESP=12, EIBRESP2=1</span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">  
</span><span style="color:turquoise;background:black;font-weight:normal;font-style:normal"> PF1 - help       PF3 - goto bkpt    ENTER - step     CLEAR - Show user screen</span><span style="color:deepSkyBlue;background:black;font-weight:normal;font-style:normal">  
</span></pre></td></tr>
  </table>



  <p>The last time we saw an api call there was no 'after'. This time there is, 
	because the last response is not zero. Since as you can see neither RESP nor 
	NOHANDLE was coded we know this is going to result in a transaction abend, 
	so press ENTER to see it.</p>



  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal">ABEND TESTER                                                                    
                                                                                
Press a PF key to force one of the following abends:                            
                                                                                
PF1 = ASRA (Data Exception)                                                     
PF2 = ASRA (Decimal Divide Exception)                                           
PF3 = ASRA (Protection Exception)                                               
PF4 = ABM0 (Missing Map)                                                        
PF5 = AEIO (PGMIDERR)                                                           
PF6 = AEIL (DSIDERR)                                                            
PF7 = AICA  (Run away task)                                                     
                                                                                
                                                                                
Or press Enter to exit without abending.                                        
</span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">Transaction Abend Code AEIL                                                    
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">Although the
transaction it done, KEDF is actually
still active, waiting for us to do something else. We should press CLEAR, then type KEDF OFF to turn it off.</p>

  <table border=1 align=center width="650"><tr bgcolor=black><td><pre><span style="color:Lime;background:black;font-weight:normal;font-style:normal"></span><span style="color:black;background:red;font-weight:normal;font-style:normal"> </span><span style="color:Lime;background:black;font-weight:normal;font-style:normal">    KEDF is off                                                                
                                                                                
                                                                                
                                                                                
</span></pre></td></tr>
  </table>


<p align="left">Source trace is a powerful feature and you may be tempted to 
compile all your programs to use it. You should be aware it has substantial 
overhead. First there is the file space the source data base uses to store your 
programs so that they can be displayed online. Probably more significant is the 
cpu overhead, and the corresponding slow down of executed programs, even when 
not actively tracing. This is due to adding several new statements before almost 
every original statement in your program! It is especially noticeable when 
program loops are used for character handling or similar activates. This effect 
can be reduced by using the &lt;SD&gt; and &lt;/SD&gt; preprocessor markup to turn on and 
off (respectively) the generation of these additional statements. Of course if 
generation is off the original statements within the marked off block will show 
up in blue, meaning that you can't step thru them nor set breakpoints within 
them. KEBRPGM is a good example of use of &lt;SD&gt; and &lt;/SD&gt; for such purpose.</p>
<h4 align="left"><a name="debugging-k5"></a>Summary of KEDF commands</h4>
<p><b>ENTER</b> Pressing ENTER restores the user screen and returns to the user 
program. Often the next user program api occurs so quickly that the user screen 
is not seen, or seen only as a flash before the KEDF screen is showing again.</p>
<p><b>CLEAR</b> Pressing CLEAR displays the user screen. Pressing CLEAR in that user 
screen display returns to the preceding KEDF display. Actually, pressing <u>any</u> 
AID key will return to the KEDF display.</p>
<p><b>PF1</b> ( help ) Pressing PF1 toggles between 1 line, 4 lines, and 7 lines of PF 
key command help at the bottom of the screen.
</p>
<p><b>PF2</b> ( src &lt;-&gt; api ) Pressing PF2 switches between Source mode and API mode. 
If Source mode the first field on the 2nd screen line will show <u>Status (S)</u>, 
if in API mode it will show<u> Status (A)</u>.&nbsp; This is only relevant in 
source trace mode (see PF13), and the difference is only apparent when the 
current line is a <i><b>KICKS</b></i> api call. If in Source mode the <u>About 
to Execute Command</u> api call is shown inline with the source, and the <u>
Command Execution Complete screen</u> is suppressed. If in API mode the api call 
screens (both <u>About</u> &amp; <u>Complete</u>) are shown as they normally are 
when not doing source trace.</p>
<p><b>PF3</b> ( goto bkpt ) Pressing PF3 restores the user screen and returns to 
the user program, then ignores further source or api trace events until until (a) a breakpoint (see PF5) is hit, or (b) a 
new transaction starts (see PF6), or (c) a <i><b>KICKS</b></i> api call results in an 
exceptional condition (ie, EIBRESP &lt;&gt; 0).</p>
<p><b>PF4</b> ( skip subroutine ) Pressing PF4 sets a temporary breakpoint at the next 
executable statement past the current statement (ie, the next green line), then does a &quot;go to breakpoint&quot; 
(see PF3). When that breakpoint is hit it is automatically unset. Assuming the 
current statement is a call or perform, this normally results in 'skipping' the 
called or performed code. Note however that the &quot;next executable statement past 
the current statement&quot; may not be the statement that will be executed when the 
called/performed code returns - so some care must be exercised in using this.</p>
<p><b>PF5</b> ( toggle breakpoint ) If the cursor is at the default location (just past
<u>Last Response:</u>) pressing PF5 toggles a breakpoint at the current line 
(the white line in the middle of the screen).&nbsp; If the cursor is instead on 
a line that is breakable (green) pressing PF5 toggles a breakpoint on that line. 
Breakpoints show up in reverse video. When breakpoints are set the right side of 
line 3 shows the number set and the maximum number the can be set.</p>
<p><b>PF6</b> ( <font face="Courier New">....</font> or transaction id ) Pressing PF6 
toggles the help text beside PF6 between '<font face="Courier New">....</font>' 
and the current transaction id. When it's <font face="Courier New">....</font> a 
&quot;go to breakpoint&quot; will stop when the current transaction number changes (ie, 
the next pseudo conversational task). When it's a transaction id a &quot;go to 
breakpoint will not stop until the transaction id is different from that. </p>
<p><b>PF7</b> ( page backward ) Pressing PF7 scrolls any scrollable area on the screen 
backward (toward lower addresses). PF8 will scroll the other way. PF19 (shift 
PF7) scrolls to the top (lowest address). PF20 (shift PF8) scrolls to the bottom 
(highest address). PF24 (shift PF12) will re-center on whatever was initially 
showing. These keys can used (for example) to page thru a program source listing 
in source trace mode.</p>
<p><b>PF8</b> ( page forward ) Pressing PF8 scrolls any scrollable area on the screen 
forward (toward higher addresses). </p>
<p><b>PF9</b> ( trace tbl ) Pressing PF9 displays the trace table. The scrolling keys 
(PF7, PF8, PF19, PF20, PF24) can be used to review the otherwise off screen 
portions.</p>
<p><b>PF10</b> ( EIB ) Pressing PF10 displays the EIB. This usually fits on one screen 
(but you may need to press PF1 a couple times to reduce the number help lines on 
a 24 line display).</p>
<p><b>PF11</b> ( CommArea ) Pressing PF11 displays a line showing the address and size 
of the current comm area, and if the length is non-zero it displays the comm 
area in a scrollable 'dump' format. In this dump format the first column is the 
offset, the second column is the address, the next 4 columns are 16 characters 
in hex format, and the last 4 columns are the same 16 characters in ebcdic (dots 
for unprintable).</p>
<p><b>PF12</b> ( Working Storage ) Pressing PF12 displays a line showing the address 
and size of the current program (including any internal working storage), and if 
the length is non-zero it displays the program in a scrollable 'dump' format. </p>
<p><b>PF13</b> ( tog ST )&nbsp; Pressing PF13 (shift PF1) toggles source code display 
on/off. When source code trace is on the first field on the 2nd screen line will 
show <u>Status (S)</u> or <u>Status (A)</u>. When it is off the 2nd screen line 
will show just <u>Status</u>.</p>
<p><b>PF14</b> ( CWA ) Pressing PF14 (shift PF2) displays a line showing the address 
and size of the common work area, and if the length is non-zero it displays the 
CWA in a scrollable 'dump' format. </p>
<p><b>PF15</b> ( QUIT ) Pressing PF15 (shift PF3) turns off KEDF and returns to the 
user program. KEDF can be turned on again by using the KEDF transaction.</p>
<p><b>PF16</b> ( unassigned )</p>
<p><b>PF17</b> ( dump ) Pressing PF17 (shift PF5) generates a transaction dump (code KEDF) for the user transaction, but no abend.</p>
<p><b>PF18</b> ( abend ) Pressing PF18 (shift PF6) generates a transaction abend (code 
KEDF) for the user transaction, which of course also terminates the current KEDF 
presentation. KEDF remains active however and will trace the next transaction.</p>
<p><b>PF19</b> ( top ) Pressing PF19 (shift PF7) scrolls any scrollable area on the 
screen backward&nbsp; (to the&nbsp; lowest address). </p>
<p><b>PF20</b>&nbsp; ( bottom ) Pressing PF20 (shift PF8) scrolls any scrollable area 
on the screen forward (to the highest address). </p>
<p><b>PF21</b> ( TWA ) Pressing PF21 (shift PF9) displays a line showing the address 
and size of the transaction work area, and if the length is non-zero it displays 
the TWA in a scrollable 'dump' format. </p>
<p><b>PF22</b> ( TCTTEUA ) Pressing PF22 (shift PF10) displays a line showing the 
address and size of the terminal user area, and if the length is non-zero it 
displays the TCTTEUA in a scrollable 'dump' format. </p>
<p><b>PF23</b> ( TIOA ) Pressing PF23 (shift PF11) displays a line showing the address 
and size of the terminal I/O area, and if the length is non-zero it displays the 
TIOA in a scrollable 'dump' format. </p>
<p><b>PF24</b>&nbsp; ( re-center ) Pressing PF24 (shift PF12)&nbsp; scrolls any 
scrollable area on the screen to its initial location. </p>
<h4 align="left"><a name="debugging-k3"></a>Securing your program from KEDF 
trace</h4>
<p>If you accidentally leave KEDF turned on you'll see that essentially all 
command level programs will trace. But a few do not (like KEDF, KSGM, KSSF), and 
you may wonder how to similarly secure your own program's operation. </p>
<p>First, understand that the overhead of normal KEDF trace (not talking about 
source trace here!) code in your own program is 
minimal if KEDF is not turned on. Balance this tiny overhead against the ability 
to closely observe your program's operation if that becomes necessary. Still, 
there are may be situations where you do not want your program's operation observed, or have concerns 
that such observation may cause other problems (such as holding files for long 
periods).</p>
<p>To prevent KEDF from tracing your COBOL program linkedit it with KIKCOBGX 
instead of with KIKCOBGL. Linkedit your GCC program with KIKGCCGX instead of 
with KIKGCCGL. Note this will prevent trace, but will not eliminate the 
compiled in overhead in a source trace enabled program. The only way to do that 
is to recompile the program without source trace enabled.</p>




<p align="left">
<p align="left">
<p align="left">
<hr>

<font size="3">Copyright <font face="Times New Roman">© Mike Noel, 2008-2014;
</font></font>last updated 3/7/2015
</body></html>